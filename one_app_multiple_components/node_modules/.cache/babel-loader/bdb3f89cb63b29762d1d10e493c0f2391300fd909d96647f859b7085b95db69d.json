{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-61b0bdae\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"id\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_message_container = _resolveComponent(\"message-container\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"mainContainer\",\n    id: _ctx.chatAreaElement\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.messages, message => {\n    return _openBlock(), _createBlock(_component_message_container, {\n      message: message,\n      \"is-chatter\": $options.checkIsChatter(message)\n    }, null, 8 /* PROPS */, [\"message\", \"is-chatter\"]);\n  }), 256 /* UNKEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_1);\n}","map":{"version":3,"mappings":";;;;;uBACAA,oBAMM;IANDC,KAAK,EAAC,eAAe;IAAEC,EAAE,EAAEC;yBAC9BH,oBAGoBI,6BAHiBC,eAAQ,EAAnBC,OAAO;yBAAjCC,aAGoBC;MAFAF,OAAO,EAAEA,OAAO;MAChB,YAAU,EAAEG,uBAAc,CAACH,OAAO","names":["_createElementBlock","class","id","_ctx","_Fragment","$props","message","_createBlock","_component_message_container","$options"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/git_vuejs_apps/one_app_multiple_components/src/components/chattingApp/chatArea.vue"],"sourcesContent":["<template>\n<div class=\"mainContainer\" :id=\"chatAreaElement\">\n  <message-container v-for=\"message in messages\"\n                     :message=\"message\"\n                     :is-chatter=\"checkIsChatter(message)\">\n  </message-container>\n\n</div>\n</template>\n\n<script>\nimport messageContainer from \"@/components/chattingApp/messageContainer\";\nimport MessageContainer from \"@/components/chattingApp/messageContainer\";\nexport default {\nname: \"chatArea\",\n  components: {MessageContainer},\n  \n  mounted() {\n\n  },\n  props: [\"messages\", \"chatterName\", \"chatteeName\"],\n  // data(){\n  // // return {\n  // //   isChatter: false,\n  // // }\n  // // },\n  methods:{\n  checkIsChatter(message){\n    console.log(message)\n    if (message.creator == this.chatterName){\n     return true\n    } else {\n      return false\n    }\n  },\n  scrollToLastMessage(){\n    var container = this.$main.querySelector(\"#container\");\n    container.scrollTop = container.scrollHeight;\n  }\n\n  }\n}\n</script>\n\n<style scoped>\n.mainContainer{\n  display: flex;\n  width: 100%;\n  height: 90%;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  background-color: #ffffff;\n  /*border-radius: 10px;*/\n  color: #000000;\n  overflow-y: scroll;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}