{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    style: _normalizeStyle([$data.baseStyle])\n  }, null, 4 /* STYLE */);\n}","map":{"version":3,"mappings":";;uBACAA,oBAGQ;IAHFC,KAAK,mBAAGC,eAAS","names":["_createElementBlock","style","$data"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/git_vuejs_apps/one_app_multiple_components/src/components/movableElements/lassoElementsSelector.vue"],"sourcesContent":["<template>\n<div :style=\"[baseStyle]\"\n>\n\n  </div>\n</template>\n\n<script>\nexport default {\nname: \"lassoElementsSelector\",\n  props: {\n    id: {\n      type: Number,\n      default:0\n    },\n    mousePosX: {\n      type: Number,\n      default: 0\n    },\n    mousePosY: {\n      type: Number,\n      default: 0\n    },\n    width: {\n            type: String,\n            default: '0px'\n          },\n    height: {\n            type: String,\n            default: '0px'\n          },\n\n    selecting: {\n      type: Boolean,\n      default: false\n    },\n    // parentKeyEvent: {\n    //   type: String,\n    //   default: 'none',\n    // },\n  },\n  data(){\n  return {\n    selectionIntervalId: null,\n    elementPosX: 0,\n    elementPosY: 0,\n    offsetX:0,\n    offsetY:0,\n    startPosX: 0,\n    startPosY: 0,\n    originalWidth:0,\n    originalHeight: 0,\n    negativeWidth: false,\n    negativeHeight: false,\n    selectionEdges: {\n      x:0,\n      w:0,\n      y:0,\n      h:0\n    },\n    baseStyle: {\n      position: 'absolute',\n      top: '0px',\n      left: '0px',\n      transform: 'translate(0)',\n      width: this.width,\n      height: this.width,\n      border: 'dashed',\n      borderRadius: '5px',\n      backgroundColor: '#6da2fc',\n      opacity: '0.2',\n\n\n    },\n\n    elementKeyEvent: null,\n  }\n  },\n  mounted () {\n  this.setElementPos()\n  },\n  methods: {\n            setElementPos(){\n            this.baseStyle.left = this.elementPosX.toString() + 'px';\n            this.baseStyle.top = this.elementPosY.toString() + 'px';\n            },\n            startSelecting() {\n                this.baseStyle.top = this.mousePosY.toString() +'px';\n                this.baseStyle.left = this.mousePosX.toString() +'px';\n                this.offsetY = this.mousePosY;\n                this.offsetX = this.mousePosX;\n                this.selectionIntervalId = setInterval(() => {\n                  this.select();\n                }, 5);\n            },\n            select(){\n\n              this.baseStyle.border = '2px dashed black';\n              var w = this.mousePosX - this.offsetX;\n              var h = this.mousePosY - this.offsetY;\n              if (w<0){\n                this.negativeWidth = true;\n                w *= -1;\n                this.baseStyle.left = this.mousePosX.toString() +'px';\n                this.baseStyle.width = w.toString() +'px';\n              }\n              else {\n                if (this.negativeWidth){\n                  this.baseStyle.left = this.mousePosX.toString() +'px';\n                  this.offsetX = this.mousePosX;\n                  this.negativeWidth = false;\n                }\n                this.baseStyle.width = w.toString() +'px';\n              }\n\n              if (h<0) {\n                this.negativeHeight = true;\n                h *= -1;\n                this.baseStyle.top = this.mousePosY.toString() +'px';\n                this.baseStyle.height = h.toString() +'px';\n              }\n              else {\n                if (this.negativeHeight){\n                  this.baseStyle.top = this.mousePosY.toString() +'px';\n                  this.offsetY = this.mousePosY;\n                  this.negativeHeight = false;\n                }\n                this.baseStyle.height = h.toString() +'px';\n              }\n\n\n\n\n              // if (w>0 && h > 0) {\n              //   this.baseStyle.width = w.toString() +'px';\n              //   this.baseStyle.height = h.toString() +'px';\n              // }\n            },\n            stopSelecting(){\n\n              clearInterval(this.selectionIntervalId);\n              this.selectionEdges.x = parseInt(this.baseStyle.left.split(\"px\")[0]);\n              this.selectionEdges.w = parseInt(this.baseStyle.width.split(\"px\")[0]);\n              this.selectionEdges.y = parseInt(this.baseStyle.top.split(\"px\")[0]);\n              this.selectionEdges.h = parseInt(this.baseStyle.height.split(\"px\")[0]);\n              this.$emit('lassoSelectorDone', this.selectionEdges);\n              this.resetSelect();\n            },\n            resetSelect(){\n              this.baseStyle.top = '0px';\n                this.baseStyle.left = '0px';\n                this.baseStyle.width = '0px';\n                this.baseStyle.height = '0px';\n                this.baseStyle.border = '0px dashed white'\n\n            },\n\n\n  },\n  watch:{\n    selecting(newValue){\n      if (newValue) {\n        this.startSelecting()\n      } else {\n        this.stopSelecting()\n      }\n\n  },\n\n\n\n\n\n  }\n\n\n\n}\n</script>\n\n<style scoped>\n.asd{\n  background-color: #6da2fc;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}