{"ast":null,"code":"import squareElement from \"@/components/movableElements/squareElement\";\nimport rectangleElement from \"@/components/movableElements/rectangleElement\";\nimport CircleElement from \"@/components/movableElements/circleElement\";\nimport elementsBrowser from \"@/components/movableElements/elementsBrowser\";\nexport default {\n  name: \"mainMovableElements\",\n  components: {\n    CircleElement,\n    squareElement,\n    rectangleElement,\n    elementsBrowser\n  },\n  data() {\n    return {\n      mousePosX: 0,\n      mousePosY: 0,\n      elements: {\n        circle: {},\n        square: {},\n        rectangle: {}\n      },\n      elementsHighestId: 0,\n      elementsCount: 0,\n      elementsDefaultBackgroundColors: {\n        circle: 'red',\n        square: 'blue',\n        rectangle: 'green'\n      },\n      selectedItems: {},\n      multipleSelected: false,\n      dragging: false,\n      draggingIntervalId: null,\n      keyEvent: 'none'\n    };\n  },\n  mounted() {\n    setInterval(() => {\n      this.updateMultipleSelected();\n    }, 20);\n  },\n  methods: {\n    updateMousePos(event) {\n      this.mousePosX = event.clientX;\n      this.mousePosY = event.clientY;\n    },\n    executeElementClick(element, eventOriginal) {\n      var event = eventOriginal;\n      if (!event.shiftKey) {\n        if (element.selected) {\n          console('TODO: Implement an edit mode once the element is clicked when it was already clicked/selected');\n        } else {\n          this.deSelectAllElements();\n          this.selectElement(element);\n        }\n      }\n\n      // Object.assign(event, eventOriginal);\n      // if (!event.shiftKey) {\n      //   for (const [type, els] of Object.entries(this.elements)) {\n      //     for (const [id, elData] of Object.entries(this.elements[type])) {\n      //       if (id == element.id) {\n      //         if (!this.elements[type][id].selected) {\n      //           this.elements[type][id].selected = true;\n      //           this.selectedItems[id] = elData;\n      //         }\n      //         // TODO: implement what should be done when the element\n      //         //  is clicked again when it was already clicked and\n      //         //  selected. maybe like the folder finders to change the name or a property\n      //       }\n      //     }\n      //   }\n      // }\n    },\n\n    deSelectAllElements() {\n      var keys = Object.keys(this.selectedItems);\n      for (let i = 0; i < keys.length; i++) {\n        var type = this.selectedItems[keys[i]]['type'];\n        var id = this.selectedItems[keys[i]]['id'];\n        this.elements[type][id].selected = false;\n      }\n      this.selectedItems = {};\n    },\n    selectElement(element) {\n      this.elements[element.type][element.id].selected = true;\n      this.selectedItems[element.id] = element;\n    },\n    executeElementMouseDown(element, eventOriginal) {\n      var event = eventOriginal;\n      if (event.shiftKey) {\n        if (element.selected) {\n          this.elements[element.type][element.id].selected = false;\n          if (this.selectedItems.hasOwnProperty(element.id)) {\n            delete this.selectedItems[element.id];\n          }\n        } else {\n          this.elements[element.type][element.id].selected = true;\n          this.selectedItems[element.id] = element;\n        }\n      }\n\n      //   for (const [type, els] of Object.entries(this.elements)) {\n      //     for (const [id, elData] of Object.entries(this.elements[type])) {\n      //       if (id == element.id) {\n      //         if (!this.elements[type][id].selected) {\n      //           this.elements[type][id].selected = true;\n      //           this.elements[type][id].moving = true;\n      //           this.selectedItems[id] = elData;\n      //         }\n      //         else {\n      //           if (this.elements[type][id].selected) {\n      //             this.elements[type][id].selected = false;\n      //             this.elements[type][id].moving = false;\n      //             if (this.selectedItems.hasOwnProperty(id)) {\n      //               delete this.selectedItems[id]\n      //             }\n      //           }\n      //         }\n      //       }\n      //     }\n      //   }\n      // }\n\n      // if (element != null){\n      //   element.resizing = false;\n      // }\n      // for (const [type, els] of Object.entries(this.elements)) {\n      //   for (const [id, elData] of Object.entries(this.elements[type])) {\n      //     if (element != null) {\n      //       if (id == element.id) {\n      //         if (!event.shiftKey) {\n      //           if (!this.elements[type][id].selected) {\n      //             this.elements[type][id].selected = true;\n      //             this.selectedItems[id] = elData;\n      //           }\n      //         }\n      //         else{\n      //           if (this.elements[type][id].selected){\n      //           this.elements[type][id].selected = false;\n      //           if (this.selectedItems.hasOwnProperty(id)){\n      //             delete this.selectedItems[id]\n      //           }\n      //\n      //         }\n      //           else {\n      //             this.elements[type][id].selected = true;\n      //             this.selectedItems[id] = elData;\n      //           }\n      //         }\n      //\n      //       }\n      //       else {\n      //         if (!event.shiftKey) {\n      //           this.elements[type][id].selected = false;\n      //           if (this.selectedItems.hasOwnProperty(id)){\n      //             delete this.selectedItems[id]\n      //           }\n      //\n      //         }\n      //       }\n      //     }\n      //     else {\n      //       this.elements[type][id].selected = false;\n      //       this.elements[type][id].resizing = false;\n      //       if (this.selectedItems.hasOwnProperty(id)){\n      //             delete this.selectedItems[id]\n      //           }\n      //\n      //     }\n      //   }\n      // }\n    },\n\n    executeElementMouseUp(element, eventOriginal) {\n      var event = {};\n      Object.assign(event, eventOriginal);\n      if (event.shiftKey) {\n        for (const [type, els] of Object.entries(this.elements)) {\n          for (const [id, elData] of Object.entries(this.elements[type])) {\n            if (id == element.id) {\n              if (!this.elements[type][id].selected) {\n                // this.elements[type][id].selected = true;\n                this.elements[type][id].moving = false;\n                this.selectedItems[id] = elData;\n              } else {\n                if (this.elements[type][id].selected) {\n                  this.elements[type][id].selected = false;\n                  this.elements[type][id].moving = false;\n                  if (this.selectedItems.hasOwnProperty(id)) {\n                    delete this.selectedItems[id];\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // if (element != null){\n      //   element.resizing = false;\n      // }\n      // for (const [type, els] of Object.entries(this.elements)) {\n      //   for (const [id, elData] of Object.entries(this.elements[type])) {\n      //     if (element != null) {\n      //       if (id == element.id) {\n      //         if (!event.shiftKey) {\n      //           if (!this.elements[type][id].selected) {\n      //             this.elements[type][id].selected = true;\n      //             this.selectedItems[id] = elData;\n      //           }\n      //         }\n      //         else{\n      //           if (this.elements[type][id].selected){\n      //           this.elements[type][id].selected = false;\n      //           if (this.selectedItems.hasOwnProperty(id)){\n      //             delete this.selectedItems[id]\n      //           }\n      //\n      //         }\n      //           else {\n      //             this.elements[type][id].selected = true;\n      //             this.selectedItems[id] = elData;\n      //           }\n      //         }\n      //\n      //       }\n      //       else {\n      //         if (!event.shiftKey) {\n      //           this.elements[type][id].selected = false;\n      //           if (this.selectedItems.hasOwnProperty(id)){\n      //             delete this.selectedItems[id]\n      //           }\n      //\n      //         }\n      //       }\n      //     }\n      //     else {\n      //       this.elements[type][id].selected = false;\n      //       this.elements[type][id].resizing = false;\n      //       if (this.selectedItems.hasOwnProperty(id)){\n      //             delete this.selectedItems[id]\n      //           }\n      //\n      //     }\n      //   }\n      // }\n    },\n\n    handleKeyPress(event) {\n      this.keyEvent = event.key;\n      if (event.key == \"Delete\") {\n        for (const [id, value] of Object.entries(this.selectedItems)) {\n          delete this.elements[value.type][id];\n          if (this.selectedItems.hasOwnProperty(id)) {\n            delete this.selectedItems[id];\n          }\n          this.elementsCount -= 1;\n        }\n      }\n      if (event.key == \"Enter\" || event.key == \"Escape\") {\n        if (Object.keys(this.selectedItems).length != 0) {\n          for (const [id, data] of Object.entries(this.selectedItems)) {\n            this.elements[data.type][id].selected = true;\n            this.elements[data.type][id].resizing = false;\n          }\n        }\n      }\n    },\n    addNewElement(type) {\n      var elementId = this.elementsHighestId + 1;\n      var elementData = {\n        type: type,\n        id: elementId,\n        selected: false,\n        moving: false,\n        resizing: false,\n        backgroundColor: this.elementsDefaultBackgroundColors[type]\n      };\n      this.elements[type][elementId] = elementData;\n      this.elementsHighestId += 1;\n      this.elementsCount += 1;\n    },\n    updateMultipleSelected() {\n      if (Object.keys(this.selectedItems).length > 1) {\n        this.multipleSelected = true;\n      } else {\n        this.multipleSelected = false;\n      }\n    },\n    executeParentMouseDown(eventOriginal) {\n      var event = {};\n      Object.assign(event, eventOriginal);\n      console.log('parent mouse down');\n      if (event.button == 0 && !event.shiftKey) {\n        if (Object.keys(this.selectedItems).length != 0) {\n          for (const [id, data] of Object.entries(this.selectedItems)) {\n            this.elements[data.type][id].moving = true;\n            this.elements[data.type][id].selected = true;\n            this.elements[data.type][id].resizing = false;\n          }\n        }\n      }\n    },\n    executeParentMouseUp(eventOriginal) {\n      console.log('parent mouse up');\n      var event = {};\n      Object.assign(event, eventOriginal);\n      if (event.button == 0) {\n        if (Object.keys(this.selectedItems).length != 0) {\n          for (const [id, data] of Object.entries(this.selectedItems)) {\n            this.elements[data.type][id].moving = false;\n            this.elements[data.type][id].selected = true;\n            this.elements[data.type][id].resizing = false;\n          }\n        }\n      }\n    },\n    executeParentClick(event) {\n      console.log('parent mouse click');\n      for (const [id, data] of Object.entries(this.selectedItems)) {\n        this.elements[data.type][id].selected = false;\n        delete this.selectedItems[id];\n      }\n    },\n    stopDragging() {\n      this.dragging = false;\n      clearInterval(this.draggingIntervalId);\n    },\n    resize(element) {\n      element.selected = false;\n      element.resizing = true;\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["squareElement","rectangleElement","CircleElement","elementsBrowser","name","components","data","mousePosX","mousePosY","elements","circle","square","rectangle","elementsHighestId","elementsCount","elementsDefaultBackgroundColors","selectedItems","multipleSelected","dragging","draggingIntervalId","keyEvent","mounted","setInterval","updateMultipleSelected","methods","updateMousePos","event","clientX","clientY","executeElementClick","element","eventOriginal","shiftKey","selected","console","deSelectAllElements","selectElement","keys","Object","i","length","type","id","executeElementMouseDown","hasOwnProperty","executeElementMouseUp","assign","els","entries","elData","moving","handleKeyPress","key","value","resizing","addNewElement","elementId","elementData","backgroundColor","executeParentMouseDown","log","button","executeParentMouseUp","executeParentClick","stopDragging","clearInterval","resize"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/learning_vue/one_app_multiple_components/src/components/movableElements/mainMovableElements.vue"],"sourcesContent":["<template>\n<div class=\"mainContainer\" @mousemove=\"updateMousePos($event)\">\n<!--     @click=\"executeParentClick($event)\"-->\n<!--     @keyup=\"handleKeyPress($event)\" tabindex=\"0\"-->\n<!--     @mousedown=\"executeParentMouseDown($event)\"-->\n<!--     @mouseup=\"executeParentMouseUp($event)\"-->\n\n<!--&gt;-->\n  <elements-browser class=\"elementsBrowser animate__animated animate__fadeInLeft\"\n\n                    @addElement=\"addNewElement\" v-if=\"mousePosX<100\">\n\n  </elements-browser>\n\n  <circle-element  v-for=\"element in elements.circle\"\n                   :id=\"element.id\"\n                   :key=\"element.id\"\n                   :moving=\"element.moving\"\n                   :resizing=\"element.resizing\"\n                   :background-color=\"element.backgroundColor\"\n                   @mousedown=\"executeElementMouseDown(element, $event)\"\n                   @click=\"executeElementClick(element, $event)\"\n                   v-on:click.stop v-on:mousedown.stop v-on:mouseup.stop\n                   :selected=\"element.selected\"\n                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"\n                   @dblclick=\"resize(element)\" :parent-key-event=\"keyEvent\"\n\n  >\n</circle-element>\n\n\n<!--    <square-element  v-for=\"element in elements.square\"-->\n<!--                   :id=\"element.id\"-->\n<!--                   :key=\"element.id\"-->\n<!--                   :can-move=\"element.canMove\"-->\n<!--                   :background-color=\"element.backgroundColor\"-->\n<!--                   @click=\"executeElementMouseDown(element, $event)\"-->\n<!--                   v-on:click.stop :selected-flag=\"element.selected\"-->\n<!--                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"-->\n<!--                   :multiple-selected=\"multipleSelected\"-->\n<!--  >-->\n<!--</square-element>-->\n\n<!--   <rectangle-element  v-for=\"element in elements.rectangle\"-->\n<!--                   :id=\"element.id\"-->\n<!--                   :key=\"element.id\"-->\n<!--                   :can-move=\"element.canMove\"-->\n<!--                   :background-color=\"element.backgroundColor\"-->\n<!--                   @click=\"executeElementMouseDown(element, $event)\"-->\n<!--                   v-on:click.stop :selected-flag=\"element.selected\"-->\n<!--                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"-->\n<!--                   :multiple-selected=\"multipleSelected\"-->\n<!--  >-->\n<!--</rectangle-element>-->\n\n  </div>\n</template>\n\n<script>\nimport squareElement from \"@/components/movableElements/squareElement\";\nimport rectangleElement from \"@/components/movableElements/rectangleElement\";\nimport CircleElement from \"@/components/movableElements/circleElement\";\nimport elementsBrowser from \"@/components/movableElements/elementsBrowser\";\n\n\nexport default {\nname: \"mainMovableElements\",\n  components:{CircleElement, squareElement,\n    rectangleElement, elementsBrowser},\n  data(){\n  return {\n    mousePosX: 0,\n    mousePosY: 0,\n    elements: {\n      circle: {},\n      square: {},\n      rectangle: {},\n    },\n    elementsHighestId: 0,\n    elementsCount: 0,\n    elementsDefaultBackgroundColors: {\n      circle: 'red',\n      square: 'blue',\n      rectangle: 'green'\n    },\n    selectedItems: {},\n    multipleSelected: false,\n    dragging: false,\n    draggingIntervalId: null,\n    keyEvent: 'none',\n\n  }\n  },\n  mounted() {\n    setInterval(() => {\n              this.updateMultipleSelected();\n            }, 20);\n  },\n  methods:{\n    updateMousePos(event){\n      this.mousePosX = event.clientX;\n      this.mousePosY = event.clientY;\n    },\n    executeElementClick(element, eventOriginal){\n      var event = eventOriginal;\n      if (!event.shiftKey) {\n        if (element.selected) {\n          console('TODO: Implement an edit mode once the element is clicked when it was already clicked/selected')\n        }\n        else {\n          this.deSelectAllElements();\n          this.selectElement(element);\n        }\n      }\n\n\n      // Object.assign(event, eventOriginal);\n      // if (!event.shiftKey) {\n      //   for (const [type, els] of Object.entries(this.elements)) {\n      //     for (const [id, elData] of Object.entries(this.elements[type])) {\n      //       if (id == element.id) {\n      //         if (!this.elements[type][id].selected) {\n      //           this.elements[type][id].selected = true;\n      //           this.selectedItems[id] = elData;\n      //         }\n      //         // TODO: implement what should be done when the element\n      //         //  is clicked again when it was already clicked and\n      //         //  selected. maybe like the folder finders to change the name or a property\n      //       }\n      //     }\n      //   }\n      // }\n\n    },\n    deSelectAllElements(){\n      var keys = Object.keys(this.selectedItems);\n      for (let i=0; i< keys.length; i++){\n        var type = this.selectedItems[keys[i]]['type'];\n        var id = this.selectedItems[keys[i]]['id'];\n        this.elements[type][id].selected = false;\n      }\n      this.selectedItems = {};\n\n    },\n    selectElement(element) {\n      this.elements[element.type][element.id].selected = true;\n      this.selectedItems[element.id] = element;\n    },\n    executeElementMouseDown(element, eventOriginal){\n      var event = eventOriginal;\n      if (event.shiftKey) {\n        if (element.selected) {\n          this.elements[element.type][element.id].selected = false;\n          if (this.selectedItems.hasOwnProperty(element.id)) {\n            delete this.selectedItems[element.id]\n          }\n        }\n        else {\n          this.elements[element.type][element.id].selected = true;\n          this.selectedItems[element.id] = element;\n        }\n      }\n\n      //   for (const [type, els] of Object.entries(this.elements)) {\n      //     for (const [id, elData] of Object.entries(this.elements[type])) {\n      //       if (id == element.id) {\n      //         if (!this.elements[type][id].selected) {\n      //           this.elements[type][id].selected = true;\n      //           this.elements[type][id].moving = true;\n      //           this.selectedItems[id] = elData;\n      //         }\n      //         else {\n      //           if (this.elements[type][id].selected) {\n      //             this.elements[type][id].selected = false;\n      //             this.elements[type][id].moving = false;\n      //             if (this.selectedItems.hasOwnProperty(id)) {\n      //               delete this.selectedItems[id]\n      //             }\n      //           }\n      //         }\n      //       }\n      //     }\n      //   }\n      // }\n\n        // if (element != null){\n        //   element.resizing = false;\n        // }\n        // for (const [type, els] of Object.entries(this.elements)) {\n        //   for (const [id, elData] of Object.entries(this.elements[type])) {\n        //     if (element != null) {\n        //       if (id == element.id) {\n        //         if (!event.shiftKey) {\n        //           if (!this.elements[type][id].selected) {\n        //             this.elements[type][id].selected = true;\n        //             this.selectedItems[id] = elData;\n        //           }\n        //         }\n        //         else{\n        //           if (this.elements[type][id].selected){\n        //           this.elements[type][id].selected = false;\n        //           if (this.selectedItems.hasOwnProperty(id)){\n        //             delete this.selectedItems[id]\n        //           }\n        //\n        //         }\n        //           else {\n        //             this.elements[type][id].selected = true;\n        //             this.selectedItems[id] = elData;\n        //           }\n        //         }\n        //\n        //       }\n        //       else {\n        //         if (!event.shiftKey) {\n        //           this.elements[type][id].selected = false;\n        //           if (this.selectedItems.hasOwnProperty(id)){\n        //             delete this.selectedItems[id]\n        //           }\n        //\n        //         }\n        //       }\n        //     }\n        //     else {\n        //       this.elements[type][id].selected = false;\n        //       this.elements[type][id].resizing = false;\n        //       if (this.selectedItems.hasOwnProperty(id)){\n        //             delete this.selectedItems[id]\n        //           }\n        //\n        //     }\n        //   }\n        // }\n    },\n    executeElementMouseUp(element, eventOriginal){\n      var event = {};\n      Object.assign(event, eventOriginal);\n\n      if (event.shiftKey) {\n        for (const [type, els] of Object.entries(this.elements)) {\n          for (const [id, elData] of Object.entries(this.elements[type])) {\n\n            if (id == element.id) {\n              if (!this.elements[type][id].selected) {\n                // this.elements[type][id].selected = true;\n                this.elements[type][id].moving = false;\n                this.selectedItems[id] = elData;\n              }\n              else {\n                if (this.elements[type][id].selected) {\n                  this.elements[type][id].selected = false;\n                  this.elements[type][id].moving = false;\n                  if (this.selectedItems.hasOwnProperty(id)) {\n                    delete this.selectedItems[id]\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n        // if (element != null){\n        //   element.resizing = false;\n        // }\n        // for (const [type, els] of Object.entries(this.elements)) {\n        //   for (const [id, elData] of Object.entries(this.elements[type])) {\n        //     if (element != null) {\n        //       if (id == element.id) {\n        //         if (!event.shiftKey) {\n        //           if (!this.elements[type][id].selected) {\n        //             this.elements[type][id].selected = true;\n        //             this.selectedItems[id] = elData;\n        //           }\n        //         }\n        //         else{\n        //           if (this.elements[type][id].selected){\n        //           this.elements[type][id].selected = false;\n        //           if (this.selectedItems.hasOwnProperty(id)){\n        //             delete this.selectedItems[id]\n        //           }\n        //\n        //         }\n        //           else {\n        //             this.elements[type][id].selected = true;\n        //             this.selectedItems[id] = elData;\n        //           }\n        //         }\n        //\n        //       }\n        //       else {\n        //         if (!event.shiftKey) {\n        //           this.elements[type][id].selected = false;\n        //           if (this.selectedItems.hasOwnProperty(id)){\n        //             delete this.selectedItems[id]\n        //           }\n        //\n        //         }\n        //       }\n        //     }\n        //     else {\n        //       this.elements[type][id].selected = false;\n        //       this.elements[type][id].resizing = false;\n        //       if (this.selectedItems.hasOwnProperty(id)){\n        //             delete this.selectedItems[id]\n        //           }\n        //\n        //     }\n        //   }\n        // }\n    },\n    handleKeyPress(event) {\n      this.keyEvent = event.key;\n      if (event.key == \"Delete\") {\n        for (const [id, value] of Object.entries(this.selectedItems)) {\n          delete this.elements[value.type][id];\n          if (this.selectedItems.hasOwnProperty(id)){\n                    delete this.selectedItems[id]\n                  }\n          this.elementsCount -= 1;\n        }\n      }\n      if (event.key == \"Enter\" || event.key == \"Escape\") {\n        if (Object.keys(this.selectedItems).length != 0){\n          for (const [id, data] of Object.entries(this.selectedItems) ){\n            this.elements[data.type][id].selected = true;\n            this.elements[data.type][id].resizing = false;\n          }\n        }\n      }\n    },\n    addNewElement(type){\n      var elementId = this.elementsHighestId +1;\n      var elementData = {\n            type: type,\n            id: elementId,\n            selected: false,\n            moving: false,\n            resizing: false,\n            backgroundColor: this.elementsDefaultBackgroundColors[type],\n      }\n      this.elements[type][elementId] = elementData\n      this.elementsHighestId += 1\n      this.elementsCount += 1\n    },\n    updateMultipleSelected(){\n      if (Object.keys(this.selectedItems).length > 1){\n        this.multipleSelected = true;\n      } else {\n        this.multipleSelected = false;\n      }\n    },\n    executeParentMouseDown(eventOriginal){\n      var event = {};\n      Object.assign(event, eventOriginal);\n      console.log('parent mouse down')\n      if (event.button == 0 && !event.shiftKey) {\n        if (Object.keys(this.selectedItems).length != 0){\n          for (const [id, data] of Object.entries(this.selectedItems) ){\n            this.elements[data.type][id].moving = true;\n            this.elements[data.type][id].selected = true;\n            this.elements[data.type][id].resizing = false;\n          }\n        }\n      }\n    },\n\n    executeParentMouseUp(eventOriginal){\n      console.log('parent mouse up')\n      var event = {};\n      Object.assign(event, eventOriginal);\n      if (event.button == 0) {\n        if (Object.keys(this.selectedItems).length != 0){\n          for (const [id, data] of Object.entries(this.selectedItems) ){\n            this.elements[data.type][id].moving = false;\n            this.elements[data.type][id].selected = true;\n            this.elements[data.type][id].resizing = false;\n          }\n        }\n\n      }\n    },\n    executeParentClick(event) {\n      console.log('parent mouse click')\n      for (const [id, data] of Object.entries(this.selectedItems)) {\n        this.elements[data.type][id].selected = false;\n        delete this.selectedItems[id];\n      }\n    },\n\n\n    stopDragging(){\n      this.dragging = false\n      clearInterval(this.draggingIntervalId)\n    },\n    resize(element){\n      element.selected = false;\n      element.resizing = true;\n    },\n\n\n  },\n\n}\n</script>\n\n<style scoped>\n    .mainContainer{\n    position: absolute;\n    width: 100%;\n    height: 100%;\n      background-color: #ffffff;\n  }\n\n    .elementsBrowser{\n      position: absolute;\n      top: 25%;\n      -ms-transform: translateY(-50%);\n      transform: translateY(-50%);\n    }\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}