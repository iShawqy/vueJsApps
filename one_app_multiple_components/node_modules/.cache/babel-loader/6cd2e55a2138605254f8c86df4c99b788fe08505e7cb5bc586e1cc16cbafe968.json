{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-be8c10f2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"mainContainer\"\n};\nconst _hoisted_2 = {\n  class: \"actionButtonsContainer\"\n};\nconst _hoisted_3 = {\n  class: \"actionButtonsContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_questionaire_head = _resolveComponent(\"questionaire-head\");\n  const _component_add_question_form = _resolveComponent(\"add-question-form\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_questionaire_head, {\n    onFilled: $options.executeHeadFilled,\n    ref: \"refQestionaireHead\",\n    onQuestionaireHeadData: $options.updateQuestionaireHeadData\n  }, null, 8 /* PROPS */, [\"onFilled\", \"onQuestionaireHeadData\"]), _createVNode(_component_add_question_form, {\n    onFilled: $options.executeQuestionFormFilled,\n    ref: \"refAddQuestionForm\",\n    onFormData: $options.updateFormData,\n    onInputsStates: $options.getInputStates\n  }, null, 8 /* PROPS */, [\"onFilled\", \"onFormData\", \"onInputsStates\"]), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"button\", {\n    class: \"BtnStyle btnBlack\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.submitQuestion && $options.submitQuestion(...args))\n  }, \" Submit \")]), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", {\n    class: \"BtnStyle btnBlack\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.goBack && $options.goBack(...args))\n  }, \" < \"), _createElementVNode(\"button\", {\n    class: \"BtnStyle btnRed\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.deleteQuestion && $options.deleteQuestion(...args))\n  }, \" delete question \"), _createElementVNode(\"button\", {\n    class: \"BtnStyle btnBlue\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.addNewQuestion && $options.addNewQuestion(...args))\n  }, \" +new question \"), _createElementVNode(\"button\", {\n    class: \"BtnStyle btnBlack\",\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.goForward && $options.goForward(...args))\n  }, \" > \")]), _createElementVNode(\"button\", {\n    class: \"BtnStyle btnGreen\",\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.saveQuestionaire && $options.saveQuestionaire(...args))\n  }, \" save questionaire \")]);\n}","map":{"version":3,"mappings":";;;EACKA,KAAK,EAAC;AAAe;;EAWnBA,KAAK,EAAC;AAAwB;;EAS9BA,KAAK,EAAC;AAAwB;;;;uBApBrCC,oBA+CM,OA/CNC,UA+CM,GA9CJC,aAIoBC;IAJAC,QAAM,EAAEC,0BAAiB;IAC1BC,GAAG,EAAC,oBAAoB;IACvBC,sBAAoB,EAAEF;mEAG1CH,aAIqBM;IAJDJ,QAAM,EAAEC,kCAAyB;IAClCC,GAAG,EAAC,oBAAoB;IACvBG,UAAQ,EAAEJ,uBAAc;IACxBK,cAAY,EAAEL;yEAElCM,oBAOM,OAPNC,UAOM,GALJD,oBAEO;IAFCZ,KAAK,EAAC,mBAAmB;IAAGc,OAAK,yCAAER,2DAAc;KAAE,UAE7D,KAKAM,oBAkBM,OAlBNG,UAkBM,GAjBJH,oBAES;IAFDZ,KAAK,EAAC,mBAAmB;IAAEc,OAAK,yCAAER,2CAAM;KAAE,KAElD,GACAM,oBAEO;IAFCZ,KAAK,EAAC,iBAAiB;IAAGc,OAAK,yCAAER,2DAAc;KAAE,mBAE3D,GAEEM,oBAES;IAFDZ,KAAK,EAAC,kBAAkB;IAAGc,OAAK,yCAAER,2DAAc;KAAE,iBAE1D,GAKAM,oBAES;IAFDZ,KAAK,EAAC,mBAAmB;IAAEc,OAAK,yCAAER,iDAAS;KAAE,KAErD,KAGFM,oBAES;IAFDZ,KAAK,EAAC,mBAAmB;IAAEc,OAAK,yCAAER,+DAAgB;KAAE,qBAE5D","names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_questionaire_head","onFilled","$options","ref","onQuestionaireHeadData","_component_add_question_form","onFormData","onInputsStates","_createElementVNode","_hoisted_2","onClick","_hoisted_3"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/git_vuejs_apps/one_app_multiple_components/src/components/editableQuestionaire/createQuestionaire.vue"],"sourcesContent":["<template>\n<div class=\"mainContainer\">\n  <questionaire-head @filled=\"executeHeadFilled\"\n                     ref=\"refQestionaireHead\"\n                     @questionaireHeadData=\"updateQuestionaireHeadData\"\n  >\n  </questionaire-head>\n  <add-question-form @filled=\"executeQuestionFormFilled\"\n                     ref=\"refAddQuestionForm\"\n                     @formData=\"updateFormData\"\n                     @inputsStates=\"getInputStates\"\n  ></add-question-form>\n  <div class=\"actionButtonsContainer\">\n\n    <button class=\"BtnStyle btnBlack\"  @click=\"submitQuestion\">\n    Submit\n  </button>\n\n\n  </div>\n\n  <div class=\"actionButtonsContainer\">\n    <button class=\"BtnStyle btnBlack\" @click=\"goBack\">\n      &lt;\n    </button>\n    <button class=\"BtnStyle btnRed\"  @click=\"deleteQuestion\">\n    delete question\n  </button>\n\n    <button class=\"BtnStyle btnBlue\"  @click=\"addNewQuestion\">\n    +new question\n    </button>\n\n\n\n\n    <button class=\"BtnStyle btnBlack\" @click=\"goForward\">\n      &gt;\n    </button>\n  </div>\n\n  <button class=\"BtnStyle btnGreen\" @click=\"saveQuestionaire\">\n    save questionaire\n  </button>\n\n\n\n\n</div>\n</template>\n\n<script>\nimport questionaireHead from \"@/components/editableQuestionaire/questionaireHead\";\nimport addQuestionForm from \"@/components/editableQuestionaire/addQuestionForm\";\n\nexport default {\nname: \"createQuestionaire\",\ncomponents:{questionaireHead, addQuestionForm},\ndata(){\n  return {\n    headFilled: false,\n    questionFormFilled: false,\n    currentQuestionIndex: 0,\n    questionaire: {\n      title: \"\",\n      length: 0,\n      creator: \"\",\n      createdOn: \"\",\n      description: \"\",\n      questions : [\n          {\n          question: \"\",\n          choices : [],\n          correctAnswer: \"\",\n          submitted: false,\n        }\n      ]\n    },\n    questionaireHeadDefault: {\n      creator: '',\n      title: '',\n      description: '',\n    },\n    questionDefault: {\n      inputValue: '',\n        label: 'Question',\n        defaultValueToShow: 'ask a question',\n        width: '400px',\n    },\n    choicesDefault: [\n        {\n          type: 'choice',\n        inputValue: '',\n        label: 'Choice 1',\n        defaultValueToShow: 'Write choice 1',\n        width: '400px',\n          correctAnswer: false,\n      },\n        {\n          type: 'choice',\n        inputValue: '',\n        label: 'Choice 2',\n        defaultValueToShow: 'Write choice 2',\n        width: '400px',\n          correctAnswer: false,\n      },\n        {\n          type: 'choice',\n        inputValue: '',\n        label: 'Choice 3',\n        defaultValueToShow: 'Write choice 3',\n        width: '400px',\n          correctAnswer: false,\n      },\n        {\n          type: 'choice',\n        inputValue: '',\n        label: 'Choice 4',\n        defaultValueToShow: 'Write choice 4',\n        width: '400px',\n          correctAnswer: false,\n      }\n    ],\n    submitted: false,\n  }\n},\nmethods:{\n  executeHeadFilled(filled){\n    this.headFilled = filled;\n  },\n  executeQuestionFormFilled(filled){\n    this.questionFormFilled = filled;\n  },\n\n  get(){\n    this.$refs.refQestionaireHead.emitData();\n    this.$refs.refAddQuestionForm.emitData();\n  },\n  updateQuestionaireHeadData(data){\n    if (this.headFilled) {\n      this.questionaire.title = data.title;\n      this.questionaire.creator = data.creator;\n      this.questionaire.description = data.description;\n    }\n\n\n  },\n\n  updateFormData(data){\n    if (this.questionFormFilled) {\n      this.questionaire.questions[this.currentQuestionIndex].question = data[0].inputValue;\n      this.questionaire.questions[this.currentQuestionIndex].choices = [];\n      for (let i=0; i<data[1].length; i++) {\n        this.questionaire.questions[this.currentQuestionIndex].choices.push(data[1][i].inputValue)\n      }\n      this.questionaire.questions[this.currentQuestionIndex].correctAnswer = data[2];\n\n      this.$toast.success('Question was added successfully', {\n          position: \"bottom\"\n        });\n      this.submitted = true;\n      this.questionaire.questions[this.currentQuestionIndex].submitted = true;\n\n    }\n\n  },\n\n  deleteQuestion(){\n    // this.reset();\n    if (this.questionaire.questions[this.currentQuestionIndex].submitted){\n      this.questionaire.questions.splice(this.currentQuestionIndex, 1);\n      if (this.currentQuestionIndex > 0) {\n        this.currentQuestionIndex -= 1;\n        this.set();\n      } else {\n        this.appendNewQuesrionDict()\n        this.set()\n      }\n      this.$toast.success('Question was deleted successfully', {\n        position: \"bottom\"\n      });\n    } else {\n      this.$toast.error('Can not delete an unsubmitted question', {\n        position: \"bottom\"\n      });\n    }\n\n\n\n  },\n\n  appendNewQuesrionDict(){\n    var choices = [];\n    for (let i=0; i<4;i++){\n      choices.push('')\n    }\n    var question = {\n          question: \"\",\n          choices : choices,\n          correctAnswer: \"\"\n        }\n    this.questionaire.questions.push(question)\n\n  },\n\n  submitQuestion(){\n    this.get();\n    // if (!this.headFilled || !this.questionFormFilled) {\n    //     this.$toast.error('Please fill-in all data before you can submit', {\n    //     position: \"bottom\"\n    //   });\n    // }\n\n\n  },\n\n  addNewQuestion(){\n    if (this.submitted){\n      if (this.currentQuestionIndex != this.questionaire.questions.length-1){\n        this.currentQuestionIndex = this.questionaire.questions.length-1;\n      }\n      this.appendNewQuesrionDict();\n      this.currentQuestionIndex += 1;\n      this.set();\n      this.submitted = false;\n    } else {\n      this.$toast.error('Please submit the current question first', {\n        position: \"bottom\"\n      });\n    }\n    // this.reset();\n\n  },\n\n  goBack(){\n    if (this.currentQuestionIndex > 0) {\n\n      if (!this.questionaire.questions[this.currentQuestionIndex].submitted){\n        this.getInputStates()\n      }\n      this.currentQuestionIndex -= 1;\n      this.set()\n    } else {\n      this.$toast.error('Can not go back anymore', {\n          position: \"bottom\"\n        });\n    }\n  },\n\n  goForward() {\n    if (this.currentQuestionIndex < this.questionaire.questions.length-1) {\n      if (!this.questionaire.questions[this.currentQuestionIndex].submitted){\n        this.getInputStates()\n      }\n      this.currentQuestionIndex += 1;\n      this.set();\n    } else {\n      this.$toast.error('Can not go forward anymore', {\n          position: \"bottom\"\n        });\n    }\n  },\n\n  getInputStates(){\n\n  },\n  reset() {\n    // this.$refs.refQestionaireHead.reset(this.questionaireHeadDefault);\n    var choices = [];\n    for (let i=0; i<4;i++){\n      choices.push('')\n    }\n    var question = {\n          question: \"\",\n          choices : choices,\n          correctAnswer: \"\"\n        }\n    this.$refs.refAddQuestionForm.reset([question.question, choices]);\n    },\n\n  set(){\n    this.$refs.refAddQuestionForm.reset([this.questionaire.questions[this.currentQuestionIndex].question,\n      this.questionaire.questions[this.currentQuestionIndex].choices]);\n  },\n\n  saveQuestionaire(){\n    if (this.headFilled && this.questionFormFilled) {\n      console.log('saving questionaire!')\n    } else {\n      this.$toast.error('Please fill-in all data before you can save the questionaire', {\n        position: \"bottom\"\n      });\n    }\n  },\n\n\n\n\n\n}\n}\n</script>\n\n<style scoped>\n.mainContainer{\n  display: flex;\n  width: fit-content;\n  height: fit-content;\n  /*flex-direction: column;*/\n  /*justify-content: center;*/\n  /*align-items: center;*/\n}\n\n.actionButtonsContainer{\n  display: flex;\n  width: 500px;\n  height: 30px;\n  flex-direction: row;\n  justify-content: space-around;\n  flex-wrap: wrap;\n  margin: 5px;\n}\n\n.BtnStyle{\n  height: 30px;\n  width: fit-content;\n  border-radius: 10px;\n  font-size: 20px;\n  font-family: Arial;\n  border: none;\n  text-align: center;\n  text-decoration: none;\n  opacity: 0.6;\n  transition: 0.3s;\n  margin: 5px;\n  color: white;\n}\n\n.BtnStyle:hover{\n  opacity: 1;\n\n}\n\n.btnGreen{\n  background-color: #00c631;\n}\n\n.btnBlue{\n  background-color: #0022ff;\n}\n.btnRed{\n  background-color: #ff0000;\n}\n\n.btnBlack{\n\n  background-color: #000000;\n  color: white;\n}\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}