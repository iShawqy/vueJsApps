{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    style: _normalizeStyle([$data.baseStyle, $data.selectedStyle])\n  }, null, 4 /* STYLE */);\n}","map":{"version":3,"mappings":";;uBACAA,oBAGQ;IAHFC,KAAK,mBAAGC,eAAS,EAAEA,mBAAa","names":["_createElementBlock","style","$data"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/learning_vue/one_app_multiple_components/src/components/movableElements/circleElement.vue"],"sourcesContent":["<template>\n<div :style=\"[baseStyle, selectedStyle]\"\n>\n\n  </div>\n</template>\n\n<script>\nexport default {\nname: \"circleElement\",\n  props: {\n    id: {\n      type: Number,\n      default:0\n    },\n    mousePosX: {\n      type: Number,\n      default: 0\n    },\n    mousePosY: {\n      type: Number,\n      default: 0\n    },\n    width: {\n            type: String,\n            default: '100px'\n          },\n    height: {\n            type: String,\n            default: '100px'\n          },\n    backgroundColor: {\n             type: String,\n             default: 'green'\n            },\n    selected: {\n      type: Boolean,\n      default: false,\n    },\n    moving: {\n      type: Boolean,\n      default: false,\n    },\n    resizing: {\n      type: Boolean,\n      default: false,\n    }\n\n  },\n  data(){\n  return {\n    movingIntervalId: null,\n    resizingIntervalId: null,\n    elementPosX: 200,\n    elementPosY:200,\n    offsetX:0,\n    offsetY:0,\n    startPosX: 0,\n    startPosY: 0,\n    originalWidth:0,\n    baseStyle: {\n      position: 'absolute',\n      top: '0px',\n      left: '0px',\n      backgroundColor: this.backgroundColor,\n      width: this.width,\n      height: this.width,\n      fontSize: '30px',\n      fontFamily: 'Arial',\n      border: 'none',\n      borderRadius: '100%',\n      // padding: '20px',\n      textAlign: 'center',\n      textDecoration: 'none',\n      display: 'inline-flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n\n      // margin: '4px 2px',\n      // borderRadius: '100%',\n\n    },\n    selectedStyle: {\n      border: 'none'\n    },\n\n  }\n  },\n  mounted () {\n  this.setElementPos()\n  },\n  methods: {\n            setElementPos(){\n            this.baseStyle.left = this.elementPosX.toString() + 'px';\n            this.baseStyle.top = this.elementPosY.toString() + 'px';\n            },\n            executeMouseDown(event){\n              if (event.button == 0 && !this.multipleSelected) {\n                this.startDragging()\n              }\n            },\n            executeMouseUp(event){\n              if (event.button == 0) {\n                this.stopDragging()\n              }\n            },\n            startDragging(){\n                this.offsetY = this.mousePosY - this.elementPosY;\n                this.offsetX = this.mousePosX - this.elementPosX;\n                this.movingIntervalId = setInterval(() => {\n                  this.move();\n                }, 25);\n            },\n            stopDragging(){\n                this.dragging = false\n                clearInterval(this.draggingIntervalId)\n\n              },\n            move(){\n              if (this.dragging){\n                this.elementPosX = this.mousePosX - this.offsetX;\n                this.elementPosY = this.mousePosY - this.offsetY;\n                this.baseStyle.top = this.elementPosY.toString() +'px';\n                this.baseStyle.left = this.elementPosX.toString() +'px';\n\n              }\n              },\n            editElementProps(){\n              this.selectElement(false)\n              if (this.adjustable) {\n                this.editingFlag = true;\n                this.originalWidth = this.baseStyle.width;\n                // this.baseStyle.width = '50px';\n                this.baseStyle.border = '5px dashed black'\n                this.startPosX = this.mousePosX;\n                this.startPosY = this.mousePosY;\n                this.editingIntervalId = setInterval(() => {\n                        this.resize();\n                      }, 25);\n              }\n            },\n            setElementProps(event){\n              if (event.key == \"Enter\"){\n                this.baseStyle.border = 'none';\n                this.editingFlag = false;\n              clearInterval(this.editingIntervalId)\n              }\n              else if (event.key== \"Escape\") {\n                if (this.dragging) {\n                  this.stopDragging()\n                }\n                else if (this.editingFlag) {\n                  this.baseStyle.border = 'none';\n                  clearInterval(this.editingIntervalId)\n                this.baseStyle.width = this.originalWidth;\n                this.baseStyle.height = this.originalWidth;\n                this.editingFlag = false;\n                }\n              }\n              this.selectElement(true);\n\n            },\n            resize(flag){\n              this.selectElement(false)\n              if (flag) {\n                this.baseStyle.border = '5px dashed black'\n              } else {\n                this.baseStyle.border = 'none'\n              }\n\n              // if (this.editingFlag){\n              //   var width = parseInt(this.baseStyle.width.split(\"px\")[0]) +(this.mousePosX - this.startPosX);\n              //   // var height = parseInt(this.baseStyle.width.split(\"px\")[0])+ (this.mousePosX - this.startPosX);\n              //   if (width <0) {\n              //     width *= -1;\n              //   }\n              //     // var biggerDimension = 0;\n              //     // if (width >= height){\n              //     //   biggerDimension = width;\n              //     // } else {\n              //     //   biggerDimension = height;\n              //     // }\n              //\n              //     if (width < 5){\n              //       width = 5;\n              //     }\n              //     this.baseStyle.width = width.toString() + 'px';\n              //     this.baseStyle.height = width.toString() + 'px';\n              //     this.startPosX = this.mousePosX;\n              //\n              // }\n\n            },\n            selectElement(select){\n              if (select){\n                this.selectedStyle['border'] =  '5px solid black';\n              } else {\n                this.selectedStyle = {};\n              }\n            },\n            handleKeyPress(event) {\n            if (event.key == \"Escape\") {\n\n            }\n            }\n\n  },\n  watch:{\n    selected(newValue){\n    this.selectElement(newValue)\n  },\n    resizing(newValue){\n      console.log(newValue)\n      this.resize(newValue)\n    },\n\n    moving(newValue){\n\n    },\n\n\n  }\n\n\n\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}