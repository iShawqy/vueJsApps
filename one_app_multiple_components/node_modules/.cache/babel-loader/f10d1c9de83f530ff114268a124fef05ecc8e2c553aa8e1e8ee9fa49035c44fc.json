{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, withModifiers as _withModifiers } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_elements_browser = _resolveComponent(\"elements-browser\");\n  const _component_circle_element = _resolveComponent(\"circle-element\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"mainContainer\",\n    onMousemove: _cache[1] || (_cache[1] = $event => $options.updateMousePos($event)),\n    onClick: _cache[2] || (_cache[2] = $event => $options.executeElementMouseDown(null)),\n    onKeyup: _cache[3] || (_cache[3] = $event => $options.handleKeyPress($event)),\n    tabindex: \"0\",\n    onMousedown: _cache[4] || (_cache[4] = $event => $options.executeParentMouseDown($event)),\n    onMouseup: _cache[5] || (_cache[5] = $event => $options.executeParentMouseUp($event))\n  }, [$data.mousePosX < 100 ? (_openBlock(), _createBlock(_component_elements_browser, {\n    key: 0,\n    class: \"elementsBrowser animate__animated animate__fadeInLeft\",\n    onAddElement: $options.addNewElement\n  }, null, 8 /* PROPS */, [\"onAddElement\"])) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.elements.circle, element => {\n    return _openBlock(), _createBlock(_component_circle_element, {\n      id: element.id,\n      key: element.id,\n      moving: element.moving,\n      resizing: element.resizing,\n      \"background-color\": element.backgroundColor,\n      onMousedown: $event => $options.executeElementMouseDown(element, $event),\n      onClick: [$event => $options.executeElementClick(element, $event), _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"stop\"]))],\n      selected: element.selected,\n      \"mouse-pos-x\": $data.mousePosX,\n      \"mouse-pos-y\": $data.mousePosY,\n      onDblclick: $event => $options.resize(element),\n      \"parent-key-event\": $data.keyEvent\n    }, null, 8 /* PROPS */, [\"id\", \"moving\", \"resizing\", \"background-color\", \"onMousedown\", \"onClick\", \"selected\", \"mouse-pos-x\", \"mouse-pos-y\", \"onDblclick\", \"parent-key-event\"]);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\"    <square-element  v-for=\\\"element in elements.square\\\"\"), _createCommentVNode(\"                   :id=\\\"element.id\\\"\"), _createCommentVNode(\"                   :key=\\\"element.id\\\"\"), _createCommentVNode(\"                   :can-move=\\\"element.canMove\\\"\"), _createCommentVNode(\"                   :background-color=\\\"element.backgroundColor\\\"\"), _createCommentVNode(\"                   @click=\\\"executeElementMouseDown(element, $event)\\\"\"), _createCommentVNode(\"                   v-on:click.stop :selected-flag=\\\"element.selected\\\"\"), _createCommentVNode(\"                   :mouse-pos-x=\\\"mousePosX\\\" :mouse-pos-y=\\\"mousePosY\\\"\"), _createCommentVNode(\"                   :multiple-selected=\\\"multipleSelected\\\"\"), _createCommentVNode(\"  >\"), _createCommentVNode(\"</square-element>\"), _createCommentVNode(\"   <rectangle-element  v-for=\\\"element in elements.rectangle\\\"\"), _createCommentVNode(\"                   :id=\\\"element.id\\\"\"), _createCommentVNode(\"                   :key=\\\"element.id\\\"\"), _createCommentVNode(\"                   :can-move=\\\"element.canMove\\\"\"), _createCommentVNode(\"                   :background-color=\\\"element.backgroundColor\\\"\"), _createCommentVNode(\"                   @click=\\\"executeElementMouseDown(element, $event)\\\"\"), _createCommentVNode(\"                   v-on:click.stop :selected-flag=\\\"element.selected\\\"\"), _createCommentVNode(\"                   :mouse-pos-x=\\\"mousePosX\\\" :mouse-pos-y=\\\"mousePosY\\\"\"), _createCommentVNode(\"                   :multiple-selected=\\\"multipleSelected\\\"\"), _createCommentVNode(\"  >\"), _createCommentVNode(\"</rectangle-element>\")], 32 /* HYDRATE_EVENTS */);\n}","map":{"version":3,"mappings":";;;;uBACAA,oBAqDQ;IArDHC,KAAK,EAAC,eAAe;IAAEC,WAAS,sCAAEC,uBAAc,CAACC,MAAM;IACtDC,OAAK,sCAAEF,gCAAuB;IAC9BG,OAAK,sCAAEH,uBAAc,CAACC,MAAM;IAAGG,QAAQ,EAAC,GAAG;IAC3CC,WAAS,sCAAEL,+BAAsB,CAACC,MAAM;IACxCK,SAAO,sCAAEN,6BAAoB,CAACC,MAAM;MAKYM,eAAS,wBAF7DC,aAImBC;;IAJDX,KAAK,EAAC,uDAAuD;IAE5DY,YAAU,EAAEV;qGAI/BH,oBAaec,6BAboBJ,cAAQ,CAACK,MAAM,EAA1BC,OAAO;yBAA/BL,aAaeM;MAZGC,EAAE,EAAEF,OAAO,CAACE,EAAE;MACdC,GAAG,EAAEH,OAAO,CAACE,EAAE;MACfE,MAAM,EAAEJ,OAAO,CAACI,MAAM;MACtBC,QAAQ,EAAEL,OAAO,CAACK,QAAQ;MAC1B,kBAAgB,EAAEL,OAAO,CAACM,eAAe;MACzCd,WAAS,YAAEL,gCAAuB,CAACa,OAAO,EAAEZ,MAAM;MAClDC,OAAK,aAAEF,4BAAmB,CAACa,OAAO,EAAEZ,MAAM,4CAC3C,QAAe;MAAEmB,QAAQ,EAAEP,OAAO,CAACO,QAAQ;MAC1C,aAAW,EAAEb,eAAS;MAAG,aAAW,EAAEA,eAAS;MAC/Cc,UAAQ,YAAErB,eAAM,CAACa,OAAO;MAAI,kBAAgB,EAAEN;;kCAMlEe,gFAA8D,EAC9DA,4DAA0C,EAC1CA,6DAA2C,EAC3CA,uEAAqD,EACrDA,uFAAqE,EACrEA,6FAA2E,EAC3EA,6FAA2E,EAC3EA,+FAA2E,EAC3EA,iFAA+D,EAC/DA,0BAAU,EACVA,wCAAwB,EAExBA,qFAAmE,EACnEA,4DAA0C,EAC1CA,6DAA2C,EAC3CA,uEAAqD,EACrDA,uFAAqE,EACrEA,6FAA2E,EAC3EA,6FAA2E,EAC3EA,+FAA2E,EAC3EA,iFAA+D,EAC/DA,0BAAU,EACVA,2CAA2B","names":["_createElementBlock","class","onMousemove","$options","$event","onClick","onKeyup","tabindex","onMousedown","onMouseup","$data","_createBlock","_component_elements_browser","onAddElement","_Fragment","circle","element","_component_circle_element","id","key","moving","resizing","backgroundColor","selected","onDblclick","_createCommentVNode"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/learning_vue/one_app_multiple_components/src/components/movableElements/mainMovableElements.vue"],"sourcesContent":["<template>\n<div class=\"mainContainer\" @mousemove=\"updateMousePos($event)\"\n     @click=\"executeElementMouseDown(null)\"\n     @keyup=\"handleKeyPress($event)\" tabindex=\"0\"\n     @mousedown=\"executeParentMouseDown($event)\"\n     @mouseup=\"executeParentMouseUp($event)\"\n\n>\n  <elements-browser class=\"elementsBrowser animate__animated animate__fadeInLeft\"\n\n                    @addElement=\"addNewElement\" v-if=\"mousePosX<100\">\n\n  </elements-browser>\n\n  <circle-element  v-for=\"element in elements.circle\"\n                   :id=\"element.id\"\n                   :key=\"element.id\"\n                   :moving=\"element.moving\"\n                   :resizing=\"element.resizing\"\n                   :background-color=\"element.backgroundColor\"\n                   @mousedown=\"executeElementMouseDown(element, $event)\"\n                   @click=\"executeElementClick(element, $event)\"\n                   v-on:click.stop :selected=\"element.selected\"\n                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"\n                   @dblclick=\"resize(element)\" :parent-key-event=\"keyEvent\"\n\n  >\n</circle-element>\n\n\n<!--    <square-element  v-for=\"element in elements.square\"-->\n<!--                   :id=\"element.id\"-->\n<!--                   :key=\"element.id\"-->\n<!--                   :can-move=\"element.canMove\"-->\n<!--                   :background-color=\"element.backgroundColor\"-->\n<!--                   @click=\"executeElementMouseDown(element, $event)\"-->\n<!--                   v-on:click.stop :selected-flag=\"element.selected\"-->\n<!--                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"-->\n<!--                   :multiple-selected=\"multipleSelected\"-->\n<!--  >-->\n<!--</square-element>-->\n\n<!--   <rectangle-element  v-for=\"element in elements.rectangle\"-->\n<!--                   :id=\"element.id\"-->\n<!--                   :key=\"element.id\"-->\n<!--                   :can-move=\"element.canMove\"-->\n<!--                   :background-color=\"element.backgroundColor\"-->\n<!--                   @click=\"executeElementMouseDown(element, $event)\"-->\n<!--                   v-on:click.stop :selected-flag=\"element.selected\"-->\n<!--                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"-->\n<!--                   :multiple-selected=\"multipleSelected\"-->\n<!--  >-->\n<!--</rectangle-element>-->\n\n  </div>\n</template>\n\n<script>\nimport squareElement from \"@/components/movableElements/squareElement\";\nimport rectangleElement from \"@/components/movableElements/rectangleElement\";\nimport CircleElement from \"@/components/movableElements/circleElement\";\nimport elementsBrowser from \"@/components/movableElements/elementsBrowser\";\n\n\nexport default {\nname: \"mainMovableElements\",\n  components:{CircleElement, squareElement,\n    rectangleElement, elementsBrowser},\n  data(){\n  return {\n    mousePosX: 0,\n    mousePosY: 0,\n    elements: {\n      circle: {},\n      square: {},\n      rectangle: {},\n    },\n    elementsHighestId: 0,\n    elementsCount: 0,\n    elementsDefaultBackgroundColors: {\n      circle: 'red',\n      square: 'blue',\n      rectangle: 'green'\n    },\n    selectedItems: {},\n    multipleSelected: false,\n    dragging: false,\n    draggingIntervalId: null,\n    keyEvent: 'none',\n\n  }\n  },\n  mounted() {\n    setInterval(() => {\n              this.updateMultipleSelected();\n            }, 20);\n  },\n  methods:{\n    updateMousePos(event){\n      this.mousePosX = event.clientX;\n      this.mousePosY = event.clientY;\n    },\n    executeElementClick(element, event){\n      if (!event.shiftKey) {\n        for (const [type, els] of Object.entries(this.elements)) {\n          for (const [id, elData] of Object.entries(this.elements[type])) {\n            if (id == element.id) {\n              if (!this.elements[type][id].selected) {\n                this.elements[type][id].selected = true;\n                this.selectedItems[id] = elData;\n              }\n              // TODO: implement what should be done when the element\n              //  is clicked again when it was already clicked and\n              //  selected. maybe like the folder finders to change the name or a property\n            }\n          }\n        }\n      }\n\n    },\n    executeElementMouseDown(element, event){\n      console.log(event)\n      if (event.shiftKey) {\n        for (const [type, els] of Object.entries(this.elements)) {\n          for (const [id, elData] of Object.entries(this.elements[type])) {\n            console.log('here')\n            // if (id == element.id) {\n            //   if (!this.elements[type][id].selected) {\n            //     this.elements[type][id].selected = true;\n            //     this.selectedItems[id] = elData;\n            //   }\n            //   else {\n            //     if (this.elements[type][id].selected) {\n            //       this.elements[type][id].selected = false;\n            //       if (this.selectedItems.hasOwnProperty(id)) {\n            //         delete this.selectedItems[id]\n            //       }\n            //     }\n            //   }\n            // }\n          }\n        }\n      }\n\n\n\n        // if (element != null){\n        //   element.resizing = false;\n        // }\n        // for (const [type, els] of Object.entries(this.elements)) {\n        //   for (const [id, elData] of Object.entries(this.elements[type])) {\n        //     if (element != null) {\n        //       if (id == element.id) {\n        //         if (!event.shiftKey) {\n        //           if (!this.elements[type][id].selected) {\n        //             this.elements[type][id].selected = true;\n        //             this.selectedItems[id] = elData;\n        //           }\n        //         }\n        //         else{\n        //           if (this.elements[type][id].selected){\n        //           this.elements[type][id].selected = false;\n        //           if (this.selectedItems.hasOwnProperty(id)){\n        //             delete this.selectedItems[id]\n        //           }\n        //\n        //         }\n        //           else {\n        //             this.elements[type][id].selected = true;\n        //             this.selectedItems[id] = elData;\n        //           }\n        //         }\n        //\n        //       }\n        //       else {\n        //         if (!event.shiftKey) {\n        //           this.elements[type][id].selected = false;\n        //           if (this.selectedItems.hasOwnProperty(id)){\n        //             delete this.selectedItems[id]\n        //           }\n        //\n        //         }\n        //       }\n        //     }\n        //     else {\n        //       this.elements[type][id].selected = false;\n        //       this.elements[type][id].resizing = false;\n        //       if (this.selectedItems.hasOwnProperty(id)){\n        //             delete this.selectedItems[id]\n        //           }\n        //\n        //     }\n        //   }\n        // }\n    },\n    handleKeyPress(event) {\n      this.keyEvent = event.key;\n      if (event.key == \"Delete\") {\n        for (const [id, value] of Object.entries(this.selectedItems)) {\n          delete this.elements[value.type][id];\n          if (this.selectedItems.hasOwnProperty(id)){\n                    delete this.selectedItems[id]\n                  }\n          this.elementsCount -= 1;\n        }\n      }\n      if (event.key == \"Enter\" || event.key == \"Escape\") {\n        if (Object.keys(this.selectedItems).length != 0){\n          for (const [id, data] of Object.entries(this.selectedItems) ){\n            this.elements[data.type][id].selected = true;\n            this.elements[data.type][id].resizing = false;\n          }\n        }\n      }\n    },\n    addNewElement(type){\n      var elementId = this.elementsHighestId +1;\n      var elementData = {\n            type: type,\n            id: elementId,\n            selected: false,\n            moving: false,\n            resizing: false,\n            backgroundColor: this.elementsDefaultBackgroundColors[type],\n      }\n      this.elements[type][elementId] = elementData\n      this.elementsHighestId += 1\n      this.elementsCount += 1\n    },\n    updateMultipleSelected(){\n      if (Object.keys(this.selectedItems).length > 1){\n        this.multipleSelected = true;\n      } else {\n        this.multipleSelected = false;\n      }\n    },\n    executeParentMouseDown(event){\n      if (event.button == 0) {\n        if (Object.keys(this.selectedItems).length != 0){\n          for (const [id, data] of Object.entries(this.selectedItems) ){\n            this.elements[data.type][id].moving = true;\n            this.elements[data.type][id].selected = true;\n            this.elements[data.type][id].resizing = false;\n\n          }\n        }\n\n      }\n    },\n    executeParentMouseUp(event){\n      if (event.button == 0) {\n        if (Object.keys(this.selectedItems).length != 0){\n          for (const [id, data] of Object.entries(this.selectedItems) ){\n            this.elements[data.type][id].moving = false;\n            this.elements[data.type][id].selected = true;\n            this.elements[data.type][id].resizing = false;\n          }\n        }\n\n      }\n    },\n\n\n    stopDragging(){\n      this.dragging = false\n      clearInterval(this.draggingIntervalId)\n    },\n    resize(element){\n      element.selected = false;\n      element.resizing = true;\n    },\n\n\n  },\n\n}\n</script>\n\n<style scoped>\n    .mainContainer{\n    position: absolute;\n    width: 100%;\n    height: 100%;\n      background-color: #ffffff;\n  }\n\n    .elementsBrowser{\n      position: absolute;\n      top: 25%;\n      -ms-transform: translateY(-50%);\n      transform: translateY(-50%);\n    }\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}