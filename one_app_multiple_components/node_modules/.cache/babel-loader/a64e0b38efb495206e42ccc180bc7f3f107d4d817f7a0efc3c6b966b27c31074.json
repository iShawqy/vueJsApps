{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, withModifiers as _withModifiers } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_elements_browser = _resolveComponent(\"elements-browser\");\n  const _component_smart_element = _resolveComponent(\"smart-element\");\n  const _component_circle_element = _resolveComponent(\"circle-element\");\n  const _component_square_element = _resolveComponent(\"square-element\");\n  const _component_rectangle_element = _resolveComponent(\"rectangle-element\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"mainContainer\",\n    onMousemove: _cache[3] || (_cache[3] = $event => $options.updateMousePos($event)),\n    onClick: _cache[4] || (_cache[4] = $event => $options.handleSelectedElement(null)),\n    onKeyup: _cache[5] || (_cache[5] = $event => $options.handleKeyPress($event)),\n    tabindex: \"0\",\n    onMousedown: _cache[6] || (_cache[6] = $event => $options.executeMouseDown($event)),\n    onMouseup: _cache[7] || (_cache[7] = $event => $options.executeMouseUp($event))\n  }, [$data.mousePosX < 100 ? (_openBlock(), _createBlock(_component_elements_browser, {\n    key: 0,\n    class: \"elementsBrowser animate__animated animate__fadeInLeft\",\n    onAddElement: $options.addNewElement\n  }, null, 8 /* PROPS */, [\"onAddElement\"])) : _createCommentVNode(\"v-if\", true), _createVNode(_component_smart_element), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.elements.circle, element => {\n    return _openBlock(), _createBlock(_component_circle_element, {\n      id: element.id,\n      key: element.id,\n      \"can-move\": element.canMove,\n      \"background-color\": element.backgroundColor,\n      onClick: [$event => $options.handleSelectedElement(element, $event), _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"stop\"]))],\n      \"selected-flag\": element.selected,\n      \"mouse-pos-x\": $data.mousePosX,\n      \"mouse-pos-y\": $data.mousePosY,\n      \"multiple-selected\": $data.multipleSelected\n    }, null, 8 /* PROPS */, [\"id\", \"can-move\", \"background-color\", \"onClick\", \"selected-flag\", \"mouse-pos-x\", \"mouse-pos-y\", \"multiple-selected\"]);\n  }), 128 /* KEYED_FRAGMENT */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.elements.square, element => {\n    return _openBlock(), _createBlock(_component_square_element, {\n      id: element.id,\n      key: element.id,\n      \"can-move\": element.canMove,\n      \"background-color\": element.backgroundColor,\n      onClick: [$event => $options.handleSelectedElement(element, $event), _cache[1] || (_cache[1] = _withModifiers(() => {}, [\"stop\"]))],\n      \"selected-flag\": element.selected,\n      \"mouse-pos-x\": $data.mousePosX,\n      \"mouse-pos-y\": $data.mousePosY,\n      \"multiple-selected\": $data.multipleSelected\n    }, null, 8 /* PROPS */, [\"id\", \"can-move\", \"background-color\", \"onClick\", \"selected-flag\", \"mouse-pos-x\", \"mouse-pos-y\", \"multiple-selected\"]);\n  }), 128 /* KEYED_FRAGMENT */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.elements.rectangle, element => {\n    return _openBlock(), _createBlock(_component_rectangle_element, {\n      id: element.id,\n      key: element.id,\n      \"can-move\": element.canMove,\n      \"background-color\": element.backgroundColor,\n      onClick: [$event => $options.handleSelectedElement(element, $event), _cache[2] || (_cache[2] = _withModifiers(() => {}, [\"stop\"]))],\n      \"selected-flag\": element.selected,\n      \"mouse-pos-x\": $data.mousePosX,\n      \"mouse-pos-y\": $data.mousePosY,\n      \"multiple-selected\": $data.multipleSelected\n    }, null, 8 /* PROPS */, [\"id\", \"can-move\", \"background-color\", \"onClick\", \"selected-flag\", \"mouse-pos-x\", \"mouse-pos-y\", \"multiple-selected\"]);\n  }), 128 /* KEYED_FRAGMENT */))], 32 /* HYDRATE_EVENTS */);\n}","map":{"version":3,"mappings":";;;;;;;uBACAA,oBAmDQ;IAnDHC,KAAK,EAAC,eAAe;IAAEC,WAAS,sCAAEC,uBAAc,CAACC,MAAM;IACtDC,OAAK,sCAAEF,8BAAqB;IAC5BG,OAAK,sCAAEH,uBAAc,CAACC,MAAM;IAAGG,QAAQ,EAAC,GAAG;IAC3CC,WAAS,sCAAEL,yBAAgB,CAACC,MAAM;IAClCK,SAAO,sCAAEN,uBAAc,CAACC,MAAM;MAKkBM,eAAS,wBAF7DC,aAImBC;;IAJDX,KAAK,EAAC,uDAAuD;IAE5DY,YAAU,EAAEV;kFAG/BW,aACiBC,8CACjBf,oBAUegB,6BAVoBN,cAAQ,CAACO,MAAM,EAA1BC,OAAO;yBAA/BP,aAUeQ;MATGC,EAAE,EAAEF,OAAO,CAACE,EAAE;MACdC,GAAG,EAAEH,OAAO,CAACE,EAAE;MACf,UAAQ,EAAEF,OAAO,CAACI,OAAO;MACzB,kBAAgB,EAAEJ,OAAO,CAACK,eAAe;MACzClB,OAAK,aAAEF,8BAAqB,CAACe,OAAO,EAAEd,MAAM,4CAC7C,QAAe;MAAE,eAAa,EAAEc,OAAO,CAACM,QAAQ;MAC/C,aAAW,EAAEd,eAAS;MAAG,aAAW,EAAEA,eAAS;MAC/C,mBAAiB,EAAEA;;qDAKnCV,oBAUagB,6BAVsBN,cAAQ,CAACe,MAAM,EAA1BP,OAAO;yBAA/BP,aAUae;MATGN,EAAE,EAAEF,OAAO,CAACE,EAAE;MACdC,GAAG,EAAEH,OAAO,CAACE,EAAE;MACf,UAAQ,EAAEF,OAAO,CAACI,OAAO;MACzB,kBAAgB,EAAEJ,OAAO,CAACK,eAAe;MACzClB,OAAK,aAAEF,8BAAqB,CAACe,OAAO,EAAEd,MAAM,4CAC7C,QAAe;MAAE,eAAa,EAAEc,OAAO,CAACM,QAAQ;MAC/C,aAAW,EAAEd,eAAS;MAAG,aAAW,EAAEA,eAAS;MAC/C,mBAAiB,EAAEA;;qDAIpCV,oBAUiBgB,6BAVqBN,cAAQ,CAACiB,SAAS,EAA7BT,OAAO;yBAAlCP,aAUiBiB;MATAR,EAAE,EAAEF,OAAO,CAACE,EAAE;MACdC,GAAG,EAAEH,OAAO,CAACE,EAAE;MACf,UAAQ,EAAEF,OAAO,CAACI,OAAO;MACzB,kBAAgB,EAAEJ,OAAO,CAACK,eAAe;MACzClB,OAAK,aAAEF,8BAAqB,CAACe,OAAO,EAAEd,MAAM,4CAC7C,QAAe;MAAE,eAAa,EAAEc,OAAO,CAACM,QAAQ;MAC/C,aAAW,EAAEd,eAAS;MAAG,aAAW,EAAEA,eAAS;MAC/C,mBAAiB,EAAEA","names":["_createElementBlock","class","onMousemove","$options","$event","onClick","onKeyup","tabindex","onMousedown","onMouseup","$data","_createBlock","_component_elements_browser","onAddElement","_createVNode","_component_smart_element","_Fragment","circle","element","_component_circle_element","id","key","canMove","backgroundColor","selected","square","_component_square_element","rectangle","_component_rectangle_element"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/learning_vue/one_app_multiple_components/src/components/movableElements/mainMovableElements.vue"],"sourcesContent":["<template>\n<div class=\"mainContainer\" @mousemove=\"updateMousePos($event)\"\n     @click=\"handleSelectedElement(null)\"\n     @keyup=\"handleKeyPress($event)\" tabindex=\"0\"\n     @mousedown=\"executeMouseDown($event)\"\n     @mouseup=\"executeMouseUp($event)\"\n\n>\n  <elements-browser class=\"elementsBrowser animate__animated animate__fadeInLeft\"\n\n                    @addElement=\"addNewElement\" v-if=\"mousePosX<100\">\n\n  </elements-browser>\n  <smart-element\n  ></smart-element>\n  <circle-element  v-for=\"element in elements.circle\"\n                   :id=\"element.id\"\n                   :key=\"element.id\"\n                   :can-move=\"element.canMove\"\n                   :background-color=\"element.backgroundColor\"\n                   @click=\"handleSelectedElement(element, $event)\"\n                   v-on:click.stop :selected-flag=\"element.selected\"\n                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"\n                   :multiple-selected=\"multipleSelected\"\n  >\n</circle-element>\n\n\n    <square-element  v-for=\"element in elements.square\"\n                   :id=\"element.id\"\n                   :key=\"element.id\"\n                   :can-move=\"element.canMove\"\n                   :background-color=\"element.backgroundColor\"\n                   @click=\"handleSelectedElement(element, $event)\"\n                   v-on:click.stop :selected-flag=\"element.selected\"\n                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"\n                   :multiple-selected=\"multipleSelected\"\n  >\n</square-element>\n\n   <rectangle-element  v-for=\"element in elements.rectangle\"\n                   :id=\"element.id\"\n                   :key=\"element.id\"\n                   :can-move=\"element.canMove\"\n                   :background-color=\"element.backgroundColor\"\n                   @click=\"handleSelectedElement(element, $event)\"\n                   v-on:click.stop :selected-flag=\"element.selected\"\n                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"\n                   :multiple-selected=\"multipleSelected\"\n  >\n</rectangle-element>\n\n  </div>\n</template>\n\n<script>\nimport squareElement from \"@/components/movableElements/squareElement\";\nimport rectangleElement from \"@/components/movableElements/rectangleElement\";\nimport CircleElement from \"@/components/movableElements/circleElement\";\nimport elementsBrowser from \"@/components/movableElements/elementsBrowser\";\nimport smartElement from \"@/components/movableElements/smartElement\";\n\nexport default {\nname: \"mainMovableElements\",\n  components:{CircleElement, squareElement,\n    rectangleElement, elementsBrowser, smartElement},\n  data(){\n  return {\n    mousePosX: 0,\n    mousePosY: 0,\n    elements: {\n      circle: {},\n      square: {},\n      rectangle: {},\n    },\n    elementsHighestId: 0,\n    elementsCount: 0,\n    elementsDefaultBackgroundColors: {\n      circle: 'red',\n      square: 'blue',\n      rectangle: 'green'\n    },\n    selectedItems: {},\n    multipleSelected: false,\n    dragging: false,\n    draggingIntervalId: null,\n\n  }\n  },\n  mounted() {\n    setInterval(() => {\n              this.updateMultipleSelected();\n            }, 50);\n  },\n  methods:{\n    updateMousePos(event){\n      this.mousePosX = event.clientX;\n      this.mousePosY = event.clientY;\n    },\n    handleSelectedElement(element, event){\n        for (const [type, els] of Object.entries(this.elements)) {\n          for (const [id, elData] of Object.entries(this.elements[type])) {\n            if (element != null) {\n              if (id == element.id) {\n                if (!event.shiftKey) {\n                  this.elements[type][id].selected = true;\n                  this.selectedItems[id] = elData;\n                }\n                else{\n                  if (this.elements[type][id].selected){\n                  this.elements[type][id].selected = false;\n                  if (this.selectedItems.hasOwnProperty(id)){\n                    delete this.selectedItems[id]\n                  }\n\n                }\n                  else {\n                    this.elements[type][id].selected = true;\n                  this.selectedItems[id] = elData;\n                  }\n                }\n\n              }\n              else {\n                if (!event.shiftKey) {\n                  this.elements[type][id].selected = false;\n                  if (this.selectedItems.hasOwnProperty(id)){\n                    delete this.selectedItems[id]\n                  }\n\n                }\n              }\n            }\n            else {\n              this.elements[type][id].selected = false;\n              if (this.selectedItems.hasOwnProperty(id)){\n                    delete this.selectedItems[id]\n                  }\n\n            }\n          }\n        }\n    },\n    handleKeyPress(event) {\n      if (event.key == \"Delete\") {\n        for (const [id, value] of Object.entries(this.selectedItems)) {\n          delete this.elements[value.type][id];\n          if (this.selectedItems.hasOwnProperty(id)){\n                    delete this.selectedItems[id]\n                  }\n          this.elementsCount -= 1;\n        }\n      }\n    },\n    addNewElement(type){\n      var elementId = this.elementsHighestId +1;\n      var elementData = {\n            type: type,\n            id: elementId,\n            canMove: true,\n            backgroundColor: this.elementsDefaultBackgroundColors[type],\n            selected: false,\n      }\n      this.elements[type][elementId] = elementData\n      this.elementsHighestId += 1\n      this.elementsCount += 1\n    },\n    updateMultipleSelected(){\n      if (Object.keys(this.selectedItems).length > 1){\n        this.multipleSelected = true;\n      } else {\n        this.multipleSelected = false;\n      }\n    },\n    executeMouseDown(event){\n      if (event.button == 0 && this.multipleSelected) {\n        this.startDragging()\n      }\n    },\n    executeMouseUp(event){\n      if (event.button == 0) {\n        this.stopDragging()\n      }\n    },\n    startDragging(){\n      this.draggingIntervalId = setInterval(() => {\n                    this.drag();\n                  }, 25);\n    },\n    drag(){\n      this.dragging = true\n    },\n    stopDragging(){\n      this.dragging = false\n      clearInterval(this.draggingIntervalId)\n    }\n\n  },\n\n}\n</script>\n\n<style scoped>\n    .mainContainer{\n    position: absolute;\n    width: 100%;\n    height: 100%;\n      background-color: #ffffff;\n  }\n\n    .elementsBrowser{\n      position: absolute;\n      top: 25%;\n      -ms-transform: translateY(-50%);\n      transform: translateY(-50%);\n    }\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}