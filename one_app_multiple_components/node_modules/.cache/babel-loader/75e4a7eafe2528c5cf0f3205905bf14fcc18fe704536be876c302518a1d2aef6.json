{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    style: _normalizeStyle([$data.baseStyle]),\n    onMousedown: _cache[0] || (_cache[0] = $event => $options.startDragging($event)),\n    onMouseup: _cache[1] || (_cache[1] = $event => $options.stopDragging($event)),\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.editElementProps && $options.editElementProps(...args))\n  }, null, 36 /* STYLE, HYDRATE_EVENTS */);\n}","map":{"version":3,"mappings":";;uBACAA,oBAKQ;IALFC,KAAK,mBAAGC,eAAS;IAAIC,WAAS,sCAAEC,sBAAa,CAACC,MAAM;IACpDC,SAAO,sCAAEF,qBAAY,CAACC,MAAM;IAC5BE,OAAK,yCAAEH,+DAAgB","names":["_createElementBlock","style","$data","onMousedown","$options","$event","onMouseup","onClick"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/learning_vue/one_app_multiple_components/src/components/movableElements/squareElement.vue"],"sourcesContent":["<template>\n<div :style=\"[baseStyle]\" @mousedown=\"startDragging($event)\"\n     @mouseup=\"stopDragging($event)\"\n     @click=\"editElementProps\"\n>\n\n  </div>\n</template>\n\n<script>\nexport default {\nname: \"squareElement\",\n  props: {\n          mousePosX: {\n            type: Number,\n            default: 0\n          },\n          mousePosY: {\n            type: Number,\n            default: 0\n          },\n          width: {\n                  type: String,\n                  default: '100px'\n                },\n         height: {\n                  type: String,\n                  default: '100px'\n                },\n         backgroundColor: {\n                   type: String,\n                   default: 'green'\n                  },\n         canMove: {\n                   type: Boolean,\n                   default: true,\n         adjustable: {\n                    type: Boolean,\n                    default: true,\n         }\n         }\n\n  },\n  data(){\n  return {\n    dragging: false,\n    draggingIntervalId: null,\n    elementPosX: 0,\n    elementPosY:0,\n    offsetX:0,\n    offsetY:0,\n    baseStyle: {\n      position: 'absolute',\n      top: '0px',\n      left: '0px',\n      backgroundColor: this.backgroundColor,\n      width: this.width,\n      height: this.height,\n      fontSize: '30px',\n      fontFamily: 'Arial',\n      border: 'none',\n      // padding: '20px',\n      textAlign: 'center',\n      textDecoration: 'none',\n      display: 'inline-flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      // margin: '4px 2px',\n      // borderRadius: '100%',\n\n    },\n\n  }\n  },\n  methods: {\n  startDragging(event){\n    if (this.canMove){\n      this.dragging = true;\n    this.offsetY = this.mousePosY - this.elementPosY;\n    this.offsetX = this.mousePosX - this.elementPosX;\n    this.draggingIntervalId = setInterval(() => {\n              this.drag();\n            }, 25);\n    }\n\n\n  },\n    stopDragging(event){\n    this.dragging = false\n      clearInterval(this.draggingIntervalId)\n    },\n\n    drag(){\n    if (this.dragging){\n      this.elementPosX = this.mousePosX - this.offsetX;\n      this.elementPosY = this.mousePosY - this.offsetY;\n      this.baseStyle.top = this.elementPosY.toString() +'px';\n      this.baseStyle.left = this.elementPosX.toString() +'px';\n\n    }\n    },\n\n  },\n  computed: {\n    editElementProps(){\n      if (this.adjustable) {\n        this.width = '50px';\n        this.baseStyle.width = this.width;\n\n        console.log('adjusting the elment')\n      }\n      return this.width;\n    },\n  },\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}