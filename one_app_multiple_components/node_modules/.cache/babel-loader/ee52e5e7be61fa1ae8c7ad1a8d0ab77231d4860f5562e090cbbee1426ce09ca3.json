{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    style: _normalizeStyle([$data.baseStyle]),\n    onMousedown: _cache[0] || (_cache[0] = $event => $options.executeMouseDown($event)),\n    onMouseup: _cache[1] || (_cache[1] = $event => $options.executeMouseUp($event)),\n    onDblclick: _cache[2] || (_cache[2] = (...args) => $options.editElementProps && $options.editElementProps(...args)),\n    onKeyup: _cache[3] || (_cache[3] = $event => $options.setElementProps($event)),\n    tabindex: \"0\"\n  }, null, 36 /* STYLE, HYDRATE_EVENTS */);\n}","map":{"version":3,"mappings":";;uBACAA,oBAKQ;IALFC,KAAK,mBAAGC,eAAS;IAAIC,WAAS,sCAAEC,yBAAgB,CAACC,MAAM;IACvDC,SAAO,sCAAEF,uBAAc,CAACC,MAAM;IAAIE,UAAQ,yCAAEH,+DAAgB;IACxDI,OAAK,sCAAEJ,wBAAe,CAACC,MAAM;IAAGI,QAAQ,EAAC","names":["_createElementBlock","style","$data","onMousedown","$options","$event","onMouseup","onDblclick","onKeyup","tabindex"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/learning_vue/one_app_multiple_components/src/components/movableElements/squareElement.vue"],"sourcesContent":["<template>\n<div :style=\"[baseStyle]\" @mousedown=\"executeMouseDown($event)\"\n     @mouseup=\"executeMouseUp($event)\" @dblclick=\"editElementProps\"\n     v-on:keyup=\"setElementProps($event)\" tabindex=\"0\"\n>\n\n  </div>\n</template>\n\n<script>\nexport default {\nname: \"squareElement\",\n  props: {\n          mousePosX: {\n            type: Number,\n            default: 0\n          },\n          mousePosY: {\n            type: Number,\n            default: 0\n          },\n          width: {\n                  type: String,\n                  default: '100px'\n                },\n         height: {\n                  type: String,\n                  default: '100px'\n                },\n         backgroundColor: {\n                   type: String,\n                   default: 'green'\n                  },\n         canMove: {\n           type: Boolean,\n           default: true,\n         },\n         adjustable: {\n                    type: Boolean,\n                    default: true,\n         },\n\n         },\n  data(){\n  return {\n    dragging: false,\n    draggingIntervalId: null,\n    editingIntervalId: null,\n    elementPosX: 500,\n    elementPosY:500,\n    offsetX:0,\n    offsetY:0,\n    editingFlag: false,\n    startPosX: 0,\n    startPosY: 0,\n    originalWidth: 0,\n    baseStyle: {\n      position: 'absolute',\n      top: '0px',\n      left: '0px',\n      backgroundColor: this.backgroundColor,\n      width: this.width,\n      height: this.height,\n      fontSize: '30px',\n      fontFamily: 'Arial',\n      border: 'none',\n\n      // padding: '20px',\n      textAlign: 'center',\n      textDecoration: 'none',\n      display: 'inline-flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n\n      // margin: '4px 2px',\n      // borderRadius: '100%',\n\n    },\n\n  }\n  },\n  mounted () {\n  this.setElementPos()\n  },\n  methods: {\n            setElementPos(){\n            this.baseStyle.left = this.elementPosX.toString() + 'px';\n            this.baseStyle.top = this.elementPosY.toString() + 'px';\n            },\n            executeMouseDown(event){\n              if (event.button == 0) {\n                this.startDragging()\n              }\n            },\n            executeMouseUp(event){\n              if (event.button == 0) {\n                this.stopDragging()\n              }\n            },\n\n            startDragging(){\n                if (this.canMove && !this.editingFlag){\n                this.dragging = true;\n              this.offsetY = this.mousePosY - this.elementPosY;\n              this.offsetX = this.mousePosX - this.elementPosX;\n              this.draggingIntervalId = setInterval(() => {\n                        this.drag();\n                      }, 25);\n              }\n\n\n            },\n            stopDragging(){\n                this.dragging = false\n                clearInterval(this.draggingIntervalId)\n\n              },\n            drag(){\n              if (this.dragging){\n                this.elementPosX = this.mousePosX - this.offsetX;\n                this.elementPosY = this.mousePosY - this.offsetY;\n                this.baseStyle.top = this.elementPosY.toString() +'px';\n                this.baseStyle.left = this.elementPosX.toString() +'px';\n\n              }\n              },\n            editElementProps(){\n\n              if (this.adjustable) {\n                this.editingFlag = true;\n                this.originalWidth = this.baseStyle.width;\n                // this.baseStyle.width = '50px';\n                this.baseStyle.border = '5px dashed black'\n                this.startPosX = this.mousePosX;\n                this.startPosY = this.mousePosY;\n                this.editingIntervalId = setInterval(() => {\n                        this.resize();\n                      }, 25);\n              }\n            },\n            setElementProps(event){\n              if (event.key == \"Enter\"){\n                this.baseStyle.border = '0px';\n              this.editingFlag = false;\n              clearInterval(this.editingIntervalId)\n              }\n              else if (event.key== \"Escape\") {\n                if (this.editingFlag){\n                   this.baseStyle.border = '0px';\n                    this.editingFlag = false;\n                    clearInterval(this.editingIntervalId)\n                    this.baseStyle.width = this.originalWidth;\n                    this.baseStyle.height = this.originalWidth;\n                }\n\n              }\n\n            },\n            resize(){\n              if (this.editingFlag){\n                var width = parseInt(this.baseStyle.width.split(\"px\")[0]) +(this.mousePosX - this.startPosX);\n                // var height = parseInt(this.baseStyle.width.split(\"px\")[0])+ (this.mousePosX - this.startPosX);\n                if (width <0) {\n                  width *= -1;\n                }\n                  // var biggerDimension = 0;\n                  // if (width >= height){\n                  //   biggerDimension = width;\n                  // } else {\n                  //   biggerDimension = height;\n                  // }\n\n                  if (width < 5){\n                    width = 5;\n                  }\n                  this.baseStyle.width = width.toString() + 'px';\n                  this.baseStyle.height = width.toString() + 'px';\n                  this.startPosX = this.mousePosX;\n\n              }\n\n            },\n\n  },\n\n\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}