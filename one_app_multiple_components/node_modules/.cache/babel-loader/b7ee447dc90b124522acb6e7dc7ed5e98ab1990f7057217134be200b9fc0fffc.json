{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport squareElement from \"@/components/movableElements/squareElement\";\nimport rectangleElement from \"@/components/movableElements/rectangleElement\";\nimport CircleElement from \"@/components/movableElements/circleElement\";\nimport elementsBrowser from \"@/components/movableElements/elementsBrowser\";\nimport lassoElementsSelector from \"@/components/movableElements/lassoElementsSelector\";\nexport default {\n  name: \"mainMovableElements\",\n  components: {\n    CircleElement,\n    squareElement,\n    rectangleElement,\n    elementsBrowser,\n    lassoElementsSelector\n  },\n  data() {\n    return {\n      mousePosX: 0,\n      mousePosY: 0,\n      elements: {\n        circle: {},\n        square: {},\n        rectangle: {}\n      },\n      elementsHighestId: 0,\n      elementsCount: 0,\n      elementsDefaultBackgroundColors: {\n        circle: 'red',\n        square: 'blue',\n        rectangle: 'green'\n      },\n      elementsDefaultDimensions: {\n        circle: {\n          width: '100px',\n          height: '100px'\n        },\n        square: {\n          width: '100px',\n          height: '100px'\n        },\n        rectangle: {\n          width: '300px',\n          height: '100px'\n        }\n      },\n      selectedItems: {},\n      multipleSelected: false,\n      lassoSelecting: false,\n      keyEvent: 'none',\n      moving: false,\n      lassoInProgress: false,\n      afterLassoIntervalId: null,\n      shiftKeyPressed: false,\n      elementsCopy: []\n    };\n  },\n  mounted() {\n    setInterval(() => {\n      this.updateMultipleSelected();\n    }, 20);\n  },\n  methods: {\n    updateMousePos(event) {\n      this.mousePosX = event.clientX;\n      this.mousePosY = event.clientY;\n    },\n    deSelectAllElements() {\n      var keys = Object.keys(this.selectedItems);\n      for (let i = 0; i < keys.length; i++) {\n        var type = this.selectedItems[keys[i]]['type'];\n        var id = this.selectedItems[keys[i]]['id'];\n        this.elements[type][id].selected = false;\n      }\n      this.selectedItems = {};\n    },\n    selectElement(element) {\n      this.elements[element.type][element.id].selected = true;\n      this.selectedItems[element.id] = element;\n    },\n    deSelectElement(element) {\n      this.elements[element.type][element.id].selected = false;\n      if (this.selectedItems.hasOwnProperty(element.id)) {\n        delete this.selectedItems[element.id];\n      }\n    },\n    executeElementMouseDown(element, eventOriginal) {\n      console.log('element mouse down');\n      var event = eventOriginal;\n      if (event.shiftKey) {\n        if (element.selected) {\n          this.deSelectElement(element);\n        } else {\n          this.selectElement(element);\n        }\n      } else {\n        this.moveSelectedElements(true);\n      }\n    },\n    executeElementMouseUp(element, eventOriginal) {\n      var event = eventOriginal;\n      if (!event.shiftKey) {\n        this.moveSelectedElements(false);\n      }\n    },\n    executeElementClick(element, eventOriginal) {\n      console.log('element clicked');\n      var event = eventOriginal;\n      if (!event.shiftKey) {\n        if (!this.moving) {\n          this.deSelectAllElements();\n          this.selectElement(element);\n        } else {\n          this.moveSelectedElements(false);\n        }\n      }\n    },\n    handleKeyPress(event) {\n      console.log(event);\n      this.keyEvent = event.key;\n      if (event.key == \"Delete\") {\n        this.deleteSelectedElements();\n      } else if (event.key == \"Enter\" || event.key == \"Escape\") {\n        if (Object.keys(this.selectedItems).length != 0) {\n          for (const [id, data] of Object.entries(this.selectedItems)) {\n            this.elements[data.type][id].selected = true;\n            this.elements[data.type][id].resizing = false;\n          }\n        }\n      } else if (event.key == 'A') {\n        this.selectAllElements();\n      } else if (event.key == 'C') {\n        this.copyElements();\n      } else if (event.key == 'V') {\n        this.pasteElements();\n      } else if (event.key == 'Shift') {\n        this.shiftKeyPressed = false;\n      }\n    },\n    handleKeyDown(event) {\n      if (event.key == \"Shift\") {\n        this.shiftKeyPressed = true;\n      }\n    },\n    pasteElements() {\n      for (let i = 0; i < this.elementsCopy.length; i++) {\n        var el = this.elementsCopy[i];\n        var elementId = this.elementsHighestId + 1;\n        el['id'] = elementId;\n        this.elements[el.type][elementId] = el;\n        this.elementsHighestId += 1;\n        this.elementsCount += 1;\n      }\n    },\n    copyElements() {\n      this.elementsCopy = [];\n      if (Object.keys(this.selectedItems).length != 0) {\n        for (const [id, value] of Object.entries(this.selectedItems)) {\n          this.elementsCopy.push(this.copyElement(value));\n        }\n      }\n    },\n    copyElement(element) {\n      var elementData = {\n        type: element.type,\n        id: 0,\n        selected: false,\n        moving: false,\n        resizing: false,\n        backgroundColor: element.backgroundColor,\n        centerXY: {},\n        width: element.width,\n        height: element.height\n      };\n      return elementData;\n    },\n    deleteSelectedElements() {\n      for (const [id, value] of Object.entries(this.selectedItems)) {\n        delete this.elements[value.type][id];\n        if (this.selectedItems.hasOwnProperty(id)) {\n          delete this.selectedItems[id];\n          this.elementsCount -= 1;\n        }\n      }\n    },\n    selectAllElements() {\n      for (const [type, els] of Object.entries(this.elements)) {\n        for (const [id, elData] of Object.entries(this.elements[type])) {\n          if (!this.elements[type][id]['selected']) {\n            this.elements[type][id]['selected'] = true;\n            this.selectedItems[id] = elData;\n          }\n        }\n      }\n    },\n    addNewElement(type) {\n      var elementId = this.elementsHighestId + 1;\n      var elementData = {\n        type: type,\n        id: elementId,\n        selected: false,\n        moving: false,\n        resizing: false,\n        backgroundColor: this.elementsDefaultBackgroundColors[type],\n        centerXY: {},\n        width: this.elementsDefaultDimensions[type]['width'],\n        height: this.elementsDefaultDimensions[type]['height']\n      };\n      this.elements[type][elementId] = elementData;\n      this.elementsHighestId += 1;\n      this.elementsCount += 1;\n    },\n    updateMultipleSelected() {\n      if (Object.keys(this.selectedItems).length > 1) {\n        this.multipleSelected = true;\n      } else {\n        this.multipleSelected = false;\n      }\n    },\n    moveSelectedElements(flag) {\n      this.moving = flag;\n      if (Object.keys(this.selectedItems).length != 0) {\n        for (const [id, data] of Object.entries(this.selectedItems)) {\n          this.elements[data.type][id].moving = flag;\n          this.elements[data.type][id].resizing = false;\n        }\n      }\n    },\n    executeParentMouseDown(eventOriginal) {\n      var event = eventOriginal;\n      console.log('parent mouse down');\n      this.lassoSelecting = true;\n      // if (event.button == 0 && !event.shiftKey) {\n      //   this.moveSelectedElements(true)\n      // }\n    },\n\n    executeParentMouseUp(eventOriginal) {\n      console.log('parent mouse up');\n      var event = eventOriginal;\n      this.lassoSelecting = false;\n      // if (event.button == 0 && !event.shiftKey) {\n      //   this.moveSelectedElements(false);\n      // }\n    },\n\n    executeParentClick(event) {\n      console.log('parent mouse click');\n      if (!this.lassoInProgress) {\n        this.deSelectAllElements();\n      }\n    },\n    lassoSelectElements(lassoEdges) {\n      console.log(lassoEdges);\n      if (lassoEdges.w > 0 && lassoEdges.h > 0) {\n        for (const [type, els] of Object.entries(this.elements)) {\n          for (const [id, elData] of Object.entries(this.elements[type])) {\n            var elCenterXY = this.elements[type][id]['centerXY'];\n            if (elCenterXY.x >= lassoEdges.x && elCenterXY.x <= lassoEdges.x + lassoEdges.w && elCenterXY.y >= lassoEdges.y && elCenterXY.y <= lassoEdges.y + lassoEdges.h) {\n              if (!this.elements[type][id]['selected']) {\n                this.selectElement(elData);\n                // this.elements[type][id]['selected'] = true;\n                // this.selectedItems[id] = elData;\n              }\n            } else {\n              if (this.elements[type][id]['selected']) {\n                if (!this.shiftKeyPressed) {\n                  this.deSelectElement(elData);\n                }\n                this.deSelectElement(elData);\n              }\n            }\n          }\n        }\n        this.lassoInProgress = true;\n        this.afterLassoIntervalId = setInterval(() => {\n          this.resetLassoFlag();\n        }, 100);\n      }\n    },\n    resetLassoFlag() {\n      this.lassoInProgress = false;\n      clearInterval(this.afterLassoIntervalId);\n    },\n    setElementCenterXY(elData) {\n      this.elements[elData.type][elData.id]['centerXY'] = elData.centerXY;\n    },\n    resize(element) {\n      element.selected = false;\n      element.resizing = true;\n    },\n    setElementDimensions(dimensions) {\n      this.elements[dimensions.type][dimensions.id]['width'] = dimensions.width;\n      this.elements[dimensions.type][dimensions.id]['height'] = dimensions.height;\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["squareElement","rectangleElement","CircleElement","elementsBrowser","lassoElementsSelector","name","components","data","mousePosX","mousePosY","elements","circle","square","rectangle","elementsHighestId","elementsCount","elementsDefaultBackgroundColors","elementsDefaultDimensions","width","height","selectedItems","multipleSelected","lassoSelecting","keyEvent","moving","lassoInProgress","afterLassoIntervalId","shiftKeyPressed","elementsCopy","mounted","setInterval","updateMultipleSelected","methods","updateMousePos","event","clientX","clientY","deSelectAllElements","keys","Object","i","length","type","id","selected","selectElement","element","deSelectElement","hasOwnProperty","executeElementMouseDown","eventOriginal","console","log","shiftKey","moveSelectedElements","executeElementMouseUp","executeElementClick","handleKeyPress","key","deleteSelectedElements","entries","resizing","selectAllElements","copyElements","pasteElements","handleKeyDown","el","elementId","value","push","copyElement","elementData","backgroundColor","centerXY","els","elData","addNewElement","flag","executeParentMouseDown","executeParentMouseUp","executeParentClick","lassoSelectElements","lassoEdges","w","h","elCenterXY","x","y","resetLassoFlag","clearInterval","setElementCenterXY","resize","setElementDimensions","dimensions"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/git_vuejs_apps/one_app_multiple_components/src/components/movableElements/mainMovableElements.vue"],"sourcesContent":["<template>\n<div class=\"mainContainer\" @mousemove=\"updateMousePos($event)\"\n     @click=\"executeParentClick($event)\"\n     @keyup=\"handleKeyPress($event)\" tabindex=\"0\"\n     @mousedown=\"executeParentMouseDown($event)\"\n     @mouseup=\"executeParentMouseUp($event)\"\n     @keydown=\"handleKeyDown($event)\"\n>\n<!--&gt;-->\n  <elements-browser class=\"elementsBrowser animate__animated animate__fadeInLeft\"\n\n                    @addElement=\"addNewElement\" v-if=\"mousePosX<100\">\n\n  </elements-browser>\n\n  <circle-element  v-for=\"element in elements.circle\"\n                   :id=\"element.id\"\n                   :key=\"element.id\"\n                   :moving=\"element.moving\"\n                   :resizing=\"element.resizing\"\n                   :background-color=\"element.backgroundColor\"\n                   :width=\"element.width\"\n                   :heigh=\"element.height\"\n                   @mousedown=\"executeElementMouseDown(element, $event)\"\n                   @mouseup=\"executeElementMouseUp(element, $event)\"\n                   @click=\"executeElementClick(element, $event)\"\n                   v-on:click.stop v-on:mousedown.stop v-on:mouseup.stop\n                   :selected=\"element.selected\"\n                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"\n                   @dblclick=\"resize(element)\" :parent-key-event=\"keyEvent\"\n                   @elementCenterXY=\"setElementCenterXY\"\n                   @elementDimensions=\"setElementDimensions\"\n\n  >\n</circle-element>\n\n  <lasso-elements-selector :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"\n                           :selecting=\"lassoSelecting\"\n                           @lassoSelectorDone=\"lassoSelectElements\"\n  >\n\n  </lasso-elements-selector>\n\n\n<!--    <square-element  v-for=\"element in elements.square\"-->\n<!--                   :id=\"element.id\"-->\n<!--                   :key=\"element.id\"-->\n<!--                   :can-move=\"element.canMove\"-->\n<!--                   :background-color=\"element.backgroundColor\"-->\n<!--                   @click=\"executeElementMouseDown(element, $event)\"-->\n<!--                   v-on:click.stop :selected-flag=\"element.selected\"-->\n<!--                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"-->\n<!--                   :multiple-selected=\"multipleSelected\"-->\n<!--  >-->\n<!--</square-element>-->\n\n<!--   <rectangle-element  v-for=\"element in elements.rectangle\"-->\n<!--                   :id=\"element.id\"-->\n<!--                   :key=\"element.id\"-->\n<!--                   :can-move=\"element.canMove\"-->\n<!--                   :background-color=\"element.backgroundColor\"-->\n<!--                   @click=\"executeElementMouseDown(element, $event)\"-->\n<!--                   v-on:click.stop :selected-flag=\"element.selected\"-->\n<!--                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"-->\n<!--                   :multiple-selected=\"multipleSelected\"-->\n<!--  >-->\n<!--</rectangle-element>-->\n\n  </div>\n</template>\n\n<script>\nimport squareElement from \"@/components/movableElements/squareElement\";\nimport rectangleElement from \"@/components/movableElements/rectangleElement\";\nimport CircleElement from \"@/components/movableElements/circleElement\";\nimport elementsBrowser from \"@/components/movableElements/elementsBrowser\";\nimport lassoElementsSelector from \"@/components/movableElements/lassoElementsSelector\";\n\n\nexport default {\nname: \"mainMovableElements\",\n  components:{CircleElement, squareElement,\n    rectangleElement, elementsBrowser, lassoElementsSelector},\n  data(){\n  return {\n    mousePosX: 0,\n    mousePosY: 0,\n    elements: {\n      circle: {},\n      square: {},\n      rectangle: {},\n    },\n    elementsHighestId: 0,\n    elementsCount: 0,\n    elementsDefaultBackgroundColors: {\n      circle: 'red',\n      square: 'blue',\n      rectangle: 'green'\n    },\n\n    elementsDefaultDimensions: {\n      circle: {\n        width: '100px',\n        height: '100px'\n      },\n      square : {\n        width: '100px',\n        height: '100px'\n      },\n      rectangle: {\n        width: '300px',\n        height: '100px'\n      }\n    },\n    selectedItems: {},\n    multipleSelected: false,\n    lassoSelecting: false,\n    keyEvent: 'none',\n    moving: false,\n    lassoInProgress: false,\n    afterLassoIntervalId: null,\n    shiftKeyPressed: false,\n    elementsCopy: [],\n\n  }\n  },\n  mounted() {\n    setInterval(() => {\n              this.updateMultipleSelected();\n            }, 20);\n  },\n  methods:{\n    updateMousePos(event){\n      this.mousePosX = event.clientX;\n      this.mousePosY = event.clientY;\n    },\n    deSelectAllElements(){\n      var keys = Object.keys(this.selectedItems);\n      for (let i=0; i< keys.length; i++){\n        var type = this.selectedItems[keys[i]]['type'];\n        var id = this.selectedItems[keys[i]]['id'];\n        this.elements[type][id].selected = false;\n      }\n      this.selectedItems = {};\n\n    },\n    selectElement(element) {\n      this.elements[element.type][element.id].selected = true;\n      this.selectedItems[element.id] = element;\n    },\n    deSelectElement(element) {\n      this.elements[element.type][element.id].selected = false;\n      if (this.selectedItems.hasOwnProperty(element.id)) {\n            delete this.selectedItems[element.id];\n          }\n    },\n    executeElementMouseDown(element, eventOriginal){\n      console.log('element mouse down');\n      var event = eventOriginal;\n      if (event.shiftKey) {\n        if (element.selected) {\n          this.deSelectElement(element);\n        }\n        else {\n          this.selectElement(element);\n        }\n      }\n      else {\n        this.moveSelectedElements(true)\n      }\n\n\n    },\n    executeElementMouseUp(element, eventOriginal){\n      var event = eventOriginal;\n      if (!event.shiftKey) {\n        this.moveSelectedElements(false);\n      }\n\n    },\n    executeElementClick(element, eventOriginal){\n      console.log('element clicked');\n      var event = eventOriginal;\n      if (!event.shiftKey) {\n        if (!this.moving) {\n          this.deSelectAllElements();\n          this.selectElement(element);\n        } else {\n          this.moveSelectedElements(false)\n        }\n\n      }\n    },\n    handleKeyPress(event) {\n      console.log(event);\n      this.keyEvent = event.key;\n      if (event.key == \"Delete\") {\n        this.deleteSelectedElements();\n      }\n      else if (event.key == \"Enter\" || event.key == \"Escape\") {\n        if (Object.keys(this.selectedItems).length != 0){\n          for (const [id, data] of Object.entries(this.selectedItems) ){\n            this.elements[data.type][id].selected = true;\n            this.elements[data.type][id].resizing = false;\n          }\n        }\n      }\n      else if (event.key == 'A') {\n        this.selectAllElements()\n      }\n      else if (event.key == 'C') {\n        this.copyElements()\n      }\n      else if (event.key == 'V'){\n        this.pasteElements();\n\n      }\n      else if (event.key == 'Shift') {\n        this.shiftKeyPressed = false;\n      }\n\n    },\n    handleKeyDown(event){\n      if (event.key==\"Shift\"){\n        this.shiftKeyPressed = true;\n      }\n    },\n\n    pasteElements(){\n      for (let i=0; i<this.elementsCopy.length; i++) {\n        var el = this.elementsCopy[i];\n        var elementId = this.elementsHighestId +1;\n        el['id'] = elementId;\n        this.elements[el.type][elementId] = el;\n        this.elementsHighestId += 1;\n        this.elementsCount += 1;\n\n      }\n\n    },\n\n    copyElements(){\n      this.elementsCopy = [];\n      if (Object.keys(this.selectedItems).length != 0) {\n        for (const [id, value] of Object.entries(this.selectedItems)) {\n        this.elementsCopy.push(this.copyElement(value))\n      }\n      }\n\n    },\n    copyElement(element) {\n        var elementData = {\n            type: element.type,\n            id: 0,\n            selected: false,\n            moving: false,\n            resizing: false,\n            backgroundColor: element.backgroundColor,\n            centerXY: {},\n            width: element.width,\n            height: element.height,\n      }\n      return elementData\n\n    },\n    deleteSelectedElements(){\n      for (const [id, value] of Object.entries(this.selectedItems)) {\n          delete this.elements[value.type][id];\n          if (this.selectedItems.hasOwnProperty(id)){\n                    delete this.selectedItems[id]\n                    this.elementsCount -= 1;\n                  }\n\n        }\n    },\n    selectAllElements(){\n      for (const [type, els] of Object.entries(this.elements)){\n        for (const [id, elData] of Object.entries(this.elements[type])){\n          if (!this.elements[type][id]['selected']) {\n            this.elements[type][id]['selected'] = true;\n            this.selectedItems[id] = elData;\n          }\n      }\n      }\n    },\n    addNewElement(type){\n      var elementId = this.elementsHighestId +1;\n      var elementData = {\n            type: type,\n            id: elementId,\n            selected: false,\n            moving: false,\n            resizing: false,\n            backgroundColor: this.elementsDefaultBackgroundColors[type],\n            centerXY: {},\n            width: this.elementsDefaultDimensions[type]['width'],\n            height: this.elementsDefaultDimensions[type]['height'],\n      }\n      this.elements[type][elementId] = elementData\n      this.elementsHighestId += 1\n      this.elementsCount += 1\n    },\n    updateMultipleSelected(){\n      if (Object.keys(this.selectedItems).length > 1){\n        this.multipleSelected = true;\n      } else {\n        this.multipleSelected = false;\n      }\n    },\n    moveSelectedElements(flag) {\n      this.moving = flag;\n      if (Object.keys(this.selectedItems).length != 0) {\n        for (const [id, data] of Object.entries(this.selectedItems)) {\n          this.elements[data.type][id].moving = flag;\n          this.elements[data.type][id].resizing = false;\n        }\n      }\n    },\n    executeParentMouseDown(eventOriginal){\n      var event = eventOriginal;\n      console.log('parent mouse down')\n      this.lassoSelecting = true;\n      // if (event.button == 0 && !event.shiftKey) {\n      //   this.moveSelectedElements(true)\n      // }\n    },\n    executeParentMouseUp(eventOriginal){\n      console.log('parent mouse up')\n      var event = eventOriginal;\n      this.lassoSelecting = false;\n      // if (event.button == 0 && !event.shiftKey) {\n      //   this.moveSelectedElements(false);\n      // }\n\n    },\n    executeParentClick(event) {\n      console.log('parent mouse click')\n      if (!this.lassoInProgress){\n        this.deSelectAllElements();\n      }\n\n    },\n    lassoSelectElements(lassoEdges){\n      console.log(lassoEdges);\n      if (lassoEdges.w >0 && lassoEdges.h >0) {\n        for (const [type, els] of Object.entries(this.elements)) {\n          for (const [id, elData] of Object.entries(this.elements[type])) {\n            var elCenterXY = this.elements[type][id]['centerXY'];\n            if (elCenterXY.x >= lassoEdges.x && elCenterXY.x <= (lassoEdges.x + lassoEdges.w)\n            && elCenterXY.y >= lassoEdges.y && elCenterXY.y <= (lassoEdges.y + lassoEdges.h)) {\n                if (!this.elements[type][id]['selected']) {\n                  this.selectElement(elData)\n                  // this.elements[type][id]['selected'] = true;\n                  // this.selectedItems[id] = elData;\n                }\n\n            } else {\n                  if (this.elements[type][id]['selected']) {\n                    if (!this.shiftKeyPressed) {\n                      this.deSelectElement(elData)\n                    }\n                  this.deSelectElement(elData)\n                }\n            }\n          }\n        }\n\n        this.lassoInProgress = true;\n        this.afterLassoIntervalId = setInterval(() => {\n          this.resetLassoFlag();\n        }, 100);\n      }\n    },\n    resetLassoFlag(){\n      this.lassoInProgress = false;\n      clearInterval(this.afterLassoIntervalId);\n    },\n    setElementCenterXY(elData){\n      this.elements[elData.type][elData.id]['centerXY'] = elData.centerXY;\n    },\n    resize(element){\n      element.selected = false;\n      element.resizing = true;\n    },\n    setElementDimensions(dimensions){\n      this.elements[dimensions.type][dimensions.id]['width'] = dimensions.width;\n      this.elements[dimensions.type][dimensions.id]['height'] = dimensions.height;\n    },\n\n  },\n\n}\n</script>\n\n<style scoped>\n    .mainContainer{\n    position: absolute;\n    width: 100%;\n    height: 100%;\n      background-color: #ffffff;\n  }\n\n    .elementsBrowser{\n      position: absolute;\n      top: 25%;\n      -ms-transform: translateY(-50%);\n      transform: translateY(-50%);\n    }\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}