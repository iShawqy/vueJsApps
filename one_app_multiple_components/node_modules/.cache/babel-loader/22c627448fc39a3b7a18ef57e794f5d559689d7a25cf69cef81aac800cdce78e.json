{"ast":null,"code":"export default {\n  name: \"progressBar\",\n  props: [\"targetProgress\"],\n  data() {\n    return {\n      progress: 0,\n      intervalId: null,\n      progressStep: 1\n    };\n  },\n  methods: {\n    updateProgressBarSmooth() {\n      if (this.progress < this.targetProgress) {\n        this.progress += this.progressStep;\n      } else {\n        clearInterval(this.intervalId);\n      }\n    }\n  },\n  watch: {\n    targetProgress(newValue, oldValue) {\n      console.log(newValue);\n      this.intervalId = setInterval(() => {\n        this.updateProgressBarSmooth();\n      }, 20);\n    }\n  }\n};","map":{"version":3,"mappings":"AAOA,eAAe;EACfA,IAAI,EAAE,aAAa;EACjBC,KAAK,EAAC,CAAC,gBAAgB,CAAC;EACxBC,IAAI,GAAE;IACJ,OAAO;MACLC,QAAQ,EAAC,CAAC;MACVC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE;IAChB;EACF,CAAC;EAEDC,OAAO,EAAE;IACTC,uBAAuB,GAAE;MAEvB,IAAI,IAAI,CAACJ,QAAO,GAAI,IAAI,CAACK,cAAc,EAAE;QACvC,IAAI,CAACL,QAAO,IAAK,IAAI,CAACE,YAAY;MACpC,OAAO;QACLI,aAAa,CAAC,IAAI,CAACL,UAAU;MAC/B;IAEF;EAEA,CAAC;EAEDM,KAAK,EAAC;IACNF,cAAc,CAACG,QAAQ,EAAEC,QAAQ,EAAC;MAChCC,OAAO,CAACC,GAAG,CAACH,QAAQ;MACpB,IAAI,CAACP,UAAS,GAAIW,WAAW,CAAC,MAAM;QAC1B,IAAI,CAACR,uBAAuB,EAAE;MAChC,CAAC,EAAE,EAAE,CAAC;IAChB;EACA;AACF","names":["name","props","data","progress","intervalId","progressStep","methods","updateProgressBarSmooth","targetProgress","clearInterval","watch","newValue","oldValue","console","log","setInterval"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/learning_vue/one_app_multiple_components/src/components/questionaire/progressBar.vue"],"sourcesContent":["<template>\n<progress class=\"progressBar\" :value=\"progress\" max=\"100\">\n\n</progress>\n</template>\n\n<script>\nexport default {\nname: \"progressBar\",\n  props:[\"targetProgress\"],\n  data(){\n    return {\n      progress:0,\n      intervalId: null,\n      progressStep: 1,\n    }\n  },\n\n  methods: {\n  updateProgressBarSmooth(){\n\n    if (this.progress < this.targetProgress) {\n      this.progress += this.progressStep;\n    } else {\n      clearInterval(this.intervalId)\n    }\n\n  },\n\n  },\n\n  watch:{\n  targetProgress(newValue, oldValue){\n    console.log(newValue)\n    this.intervalId = setInterval(() => {\n              this.updateProgressBarSmooth();\n            }, 20);\n  }\n  }\n}\n</script>\n\n<style scoped>\n.progressBar{\n  width: 100%;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}