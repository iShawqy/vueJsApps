{"ast":null,"code":"import editableInputWithLabel from \"@/components/editableQuestionaire/editableInputWithLabel\";\nexport default {\n  name: \"addQuestionForm\",\n  components: {\n    editableInputWithLabel\n  },\n  mounted() {\n    const checkFormFilled = setInterval(() => {\n      this.checkQuestionFormFilled();\n    }, 50);\n  },\n  data() {\n    return {\n      question: {\n        inputValue: '',\n        label: 'Question',\n        defaultValueToShow: 'ask a question',\n        width: '400px'\n      },\n      choices: [{\n        type: 'choice',\n        inputValue: '',\n        label: 'Choice 1',\n        defaultValueToShow: 'Write choice 1',\n        width: '400px',\n        correctAnswer: false\n      }, {\n        type: 'choice',\n        inputValue: '',\n        label: 'Choice 2',\n        defaultValueToShow: 'Write choice 2',\n        width: '400px',\n        correctAnswer: false\n      }, {\n        type: 'choice',\n        inputValue: '',\n        label: 'Choice 3',\n        defaultValueToShow: 'Write choice 3',\n        width: '400px',\n        correctAnswer: false\n      }, {\n        type: 'choice',\n        inputValue: '',\n        label: 'Choice 4',\n        defaultValueToShow: 'Write choice 4',\n        width: '400px',\n        correctAnswer: false\n      }],\n      selected: '',\n      questionFormFilled: false,\n      errorMessage: null\n    };\n  },\n  methods: {\n    checkQuestionFormFilled() {\n      var oldValue = this.questionFormFilled;\n      if (this.question.inputValue.length == 0) {\n        this.questionFormFilled = false;\n        this.errorMessage = 'Please type in a question first';\n      } else {\n        this.questionFormFilled = true;\n        this.errorMessage = null;\n      }\n      if (this.questionFormFilled) {\n        for (const [prop, value] of Object.entries(this.choices)) {\n          if (value.inputValue.length == 0) {\n            this.questionFormFilled = false;\n            this.errorMessage = 'Please give a choice @ ' + value.label;\n            break;\n          } else {\n            this.questionFormFilled = true;\n            this.errorMessage = null;\n          }\n        }\n      }\n      if (this.questionFormFilled) {\n        if (this.selected != \"\") {\n          this.questionFormFilled = true;\n          this.errorMessage = null;\n        } else {\n          this.questionFormFilled = false;\n          this.errorMessage = 'Please select the correct answer before submitting';\n        }\n      }\n      if (this.questionFormFilled) {\n        if (oldValue != this.questionFormFilled) {\n          this.$emit('filled', true);\n        }\n      } else {\n        if (oldValue != this.questionFormFilled) {\n          this.$emit('filled', false);\n        }\n      }\n    },\n    reset(data) {\n      this.question.inputValue = data[0];\n      for (let i = 0; i < this.choices.length; i++) {\n        this.choices[i].inputValue = data[1][i];\n      }\n    },\n    emitData() {\n      if (this.errorMessage != null) {\n        this.$toast.error(this.errorMessage, {\n          position: \"bottom\"\n        });\n        this.errorMessage = null;\n      }\n      this.$emit('formData', [this.question, this.choices, this.selected]);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["editableInputWithLabel","name","components","mounted","checkFormFilled","setInterval","checkQuestionFormFilled","data","question","inputValue","label","defaultValueToShow","width","choices","type","correctAnswer","selected","questionFormFilled","errorMessage","methods","oldValue","length","prop","value","Object","entries","$emit","reset","i","emitData","$toast","error","position"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/git_vuejs_apps/one_app_multiple_components/src/components/editableQuestionaire/addQuestionForm.vue"],"sourcesContent":["<template>\n  <div class=\"mainContainer\">\n    <div class=\"choiceContainer\">\n      <editable-input-with-label\n                               v-model.trim=\"question.inputValue\" :label=\"question.label\"\n                               :default-value-to-show=\"question.defaultValueToShow\" :width=\"question.width\">\n    </editable-input-with-label>\n    <editable-input-with-label v-for=\"item in choices\"\n                               v-model.trim=\"item.inputValue\" :label=\"item.label\"\n                               :default-value-to-show=\"item.defaultValueToShow\" :width=\"item.width\">\n    </editable-input-with-label>\n    </div>\n\n    <div class=\"labelSelectContainer\">\n      <label class=\"label\" for=\"comboBox\">Correct answer</label>\n  <select  class=\"selectStyle\" id=\"comboBox\" v-model=\"selected\">\n  <option disabled value=\"\">Please select the correct answer</option>\n  <option  v-for=\"item in choices\">{{item.inputValue}}</option>\n</select>\n\n    </div>\n\n\n  </div>\n\n</template>\n\n<script>\nimport editableInputWithLabel from \"@/components/editableQuestionaire/editableInputWithLabel\";\nexport default {\nname: \"addQuestionForm\",\n  components: {editableInputWithLabel},\n  mounted() {\n  const checkFormFilled = setInterval(() => {\n              this.checkQuestionFormFilled();\n            }, 50);\n},\n  data (){\n  return {\n    question: {\n      inputValue: '',\n        label: 'Question',\n        defaultValueToShow: 'ask a question',\n        width: '400px',\n    },\n    choices: [\n        {\n          type: 'choice',\n        inputValue: '',\n        label: 'Choice 1',\n        defaultValueToShow: 'Write choice 1',\n        width: '400px',\n          correctAnswer: false,\n      },\n        {\n          type: 'choice',\n        inputValue: '',\n        label: 'Choice 2',\n        defaultValueToShow: 'Write choice 2',\n        width: '400px',\n          correctAnswer: false,\n      },\n        {\n          type: 'choice',\n        inputValue: '',\n        label: 'Choice 3',\n        defaultValueToShow: 'Write choice 3',\n        width: '400px',\n          correctAnswer: false,\n      },\n        {\n          type: 'choice',\n        inputValue: '',\n        label: 'Choice 4',\n        defaultValueToShow: 'Write choice 4',\n        width: '400px',\n          correctAnswer: false,\n      }\n    ],\n    selected: '',\n    questionFormFilled: false,\n    errorMessage: null,\n  }\n  },\n  methods:{\n  checkQuestionFormFilled(){\n    var oldValue = this.questionFormFilled;\n\n    if (this.question.inputValue.length==0){\n      this.questionFormFilled = false;\n      this.errorMessage = 'Please type in a question first';\n    } else {\n      this.questionFormFilled = true;\n      this.errorMessage = null;\n    }\n\n\n\n    if (this.questionFormFilled) {\n      for (const [prop, value] of Object.entries(this.choices)) {\n      if (value.inputValue.length == 0){\n        this.questionFormFilled = false;\n        this.errorMessage = 'Please give a choice @ ' + value.label\n        break\n      } else {\n        this.questionFormFilled = true;\n        this.errorMessage = null;\n      }\n    }\n    }\n    if (this.questionFormFilled) {\n      if (this.selected!=\"\") {\n        this.questionFormFilled = true;\n        this.errorMessage = null;\n      } else {\n        this.questionFormFilled = false;\n        this.errorMessage = 'Please select the correct answer before submitting';\n\n      }\n    }\n\n\n    if (this.questionFormFilled) {\n        if (oldValue != this.questionFormFilled) {\n          this.$emit('filled', true)\n        }\n      } else {\n      if (oldValue != this.questionFormFilled) {\n          this.$emit('filled', false)\n        }\n    }\n\n  },\n  reset(data){\n    this.question.inputValue = data[0];\n    for (let i=0; i<this.choices.length; i++){\n      this.choices[i].inputValue = data[1][i];\n    }\n  },\n  emitData(){\n    if (this.errorMessage != null){\n      this.$toast.error(this.errorMessage, {\n        position: \"bottom\"\n      });\n      this.errorMessage = null;\n    }\n    this.$emit('formData', [this.question, this.choices, this.selected])\n  }\n  }\n}\n</script>\n\n<style scoped>\n.mainContainer{\n  display: flex;\n  width: 800px;\n  height: fit-content;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.choiceContainer{\n  display: flex;\n  width: 800px;\n  height: fit-content;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n}\n.answerSelectorBtn {\n  width: 60px;\n  height: 25px;\n  background-color: #008000;\n  color: white;\n  border-radius: 10px;\n  /*margin-top: 5px;*/\n  /*margin-bottom: 5px;*/\n  /*margin-left: 5px;*/\n  /*margin-right: 5px;*/\n  font-size:10px;\n  font-family:\"Arial\";\n  align-content: center;\n  text-align: center;\n}\n\n.selectStyle{\n  width: 350px;\n  height: 30px;\n  border-radius: 10px;\n  margin: 5px;\n  color: black;\n  border-color: green;\n   font-size: 16px;\n  font-family: Arial;\n}\n\n.label{\n  font-size: 20px;\n  font-family: Arial;\n  margin-top: 5px;\n  margin-bottom: 5px;\n  margin-left: 5px;\n  margin-right: 5px;\n}\n.labelSelectContainer{\n  display: flex;\n  width: 800px;\n  height: fit-content;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}