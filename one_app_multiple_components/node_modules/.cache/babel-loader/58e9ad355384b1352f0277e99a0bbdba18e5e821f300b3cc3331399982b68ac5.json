{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport questionContainer from \"@/components/questionaire/questionContainer\";\nimport answersContainer from \"@/components/questionaire/answersContainer\";\nimport scoreWidget from \"@/components/questionaire/scoreWidget\";\nimport progressBar from \"@/components/questionaire/progressBar\";\nexport default {\n  name: \"questionsAnswersContianer\",\n  components: {\n    questionContainer,\n    answersContainer,\n    scoreWidget,\n    progressBar\n  },\n  data() {\n    return {\n      darkModeActive: false,\n      currentQuestionIndex: 0,\n      questionsAnswers: this.createQuestions(),\n      correctCount: 0,\n      wrongCount: 0,\n      progress: 0\n    };\n  },\n  methods: {\n    createQuestions() {\n      let questions = ['What is the capital of France?', 'What is the currency of Germany?', 'Where is the statue of freedom located?', 'What is the capital of Egypt?', 'What is the capital of Austria?', 'What is the currency of Switzerland?', 'Where is the Alianz Arena football stadium located?', 'What is the capital of Italy?'];\n      let answers = [['Berlin', 'Paris', 'Amsterdam', 'Berlin', 'Paris', 'Amsterdam', 'Berlin', 'Paris', 'Amsterdam', 'Amsterdam', 'Berlin', 'Paris', 'Amsterdam'], ['Euro', 'German Mark', 'Pound'], ['Spain', 'Italy', 'USA'], ['Alexandria', 'Marakesh', 'Cairo'], ['Berlin', 'Paris', 'Vienna'], ['Euro', 'Swiss Frank', 'Dollars'], ['Berlin', 'Munich', 'Hamburg', 'Barcelona'], ['Vienna', 'Rome', 'Budapest']];\n      let correctAnswers = ['Paris', 'Euro', 'USA', 'Cairo', 'Vienna', 'Swiss Frank', 'Munich', 'Rome'];\n      let QA = [];\n      for (let i = 0; i < questions.length; i++) {\n        var cs = [];\n        for (let s = 0; s < answers[i].length; s++) {\n          cs.push(false);\n        }\n        QA.push({\n          question: questions[i],\n          choices: answers[i].sort((a, b) => 0.5 - Math.random()),\n          correctAnswer: correctAnswers[i],\n          correctStyles: cs\n        });\n      }\n      return QA;\n    },\n    nextQuestion() {\n      this.resetCorrectStyles();\n      // this.correctAnswer = false;\n      if (this.currentQuestionIndex < this.questionsAnswers.length - 1) {\n        this.currentQuestionIndex += 1;\n      } else {\n        this.currentQuestionIndex = 0;\n        this.correctCount = 0;\n        this.wrongCount = 0;\n        this.progress = 0;\n        this.questionsAnswers = this.createQuestions();\n      }\n    },\n    checkAnswer(answer) {\n      if (this.questionsAnswers[this.currentQuestionIndex].correctAnswer == answer) {\n        this.correctCount += 1;\n        var cs = [];\n        for (let s = 0; s < this.questionsAnswers[this.currentQuestionIndex].correctStyles.length; s++) {\n          if (this.questionsAnswers[this.currentQuestionIndex].choices[s] == answer) {\n            cs.push(true);\n          } else {\n            cs.push(false);\n          }\n        }\n        this.questionsAnswers[this.currentQuestionIndex].correctStyles = cs;\n        this.progress = (this.currentQuestionIndex + 1) / this.questionsAnswers.length * 100;\n        setTimeout(() => {\n          this.nextQuestion();\n        }, 400);\n        // this.questionsAnswers[this.currentQuestionIndex].correctStyle = true;\n        // this.correctAnswer = true;\n        // this.nextQuestion()\n      } else {\n        this.wrongCount += 1;\n        var cs = [];\n        for (let s = 0; s < this.questionsAnswers[this.currentQuestionIndex].correctStyles.length; s++) {\n          cs.push(false);\n        }\n        this.questionsAnswers[this.currentQuestionIndex].correctStyles = cs;\n      }\n    },\n    resetCorrectStyles() {\n      var cs = [];\n      for (let s = 0; s < this.questionsAnswers[this.currentQuestionIndex].correctStyles.length; s++) {\n        cs.push(false);\n      }\n      this.questionsAnswers[this.currentQuestionIndex].correctStyles = cs;\n    }\n  }\n};","map":{"version":3,"mappings":";AAuBA,OAAOA,iBAAgB,MAAO,6CAA6C;AAC3E,OAAOC,gBAAe,MAAO,4CAA4C;AACzE,OAAOC,WAAU,MAAO,uCAAuC;AAC/D,OAAOC,WAAU,MAAO,uCAAuC;AAC/D,eAAe;EACfC,IAAI,EAAE,2BAA2B;EAC/BC,UAAU,EAAE;IAACL,iBAAiB;IAAEC,gBAAgB;IAC9CC,WAAW;IAAEC;EAAW,CAAC;EAC3BG,IAAI,GAAE;IACJ,OAAO;MACLC,cAAc,EAAE,KAAK;MACrBC,oBAAoB,EAAE,CAAC;MACvBC,gBAAgB,EAAE,IAAI,CAACC,eAAe,EAAE;MACxCC,YAAY,EAAE,CAAC;MACfC,UAAU,EAAE,CAAC;MACbC,QAAQ,EAAE;IAIZ;EACF,CAAC;EAEDC,OAAO,EAAE;IAGPJ,eAAe,GAAE;MACf,IAAIK,SAAQ,GAAI,CACZ,gCAAgC,EAChC,kCAAkC,EAClC,yCAAyC,EACzC,+BAA+B,EAC/B,iCAAiC,EACjC,sCAAsC,EACtC,qDAAqD,EACrD,+BAA+B,CAClC;MACD,IAAIC,OAAM,GAAI,CACV,CAAC,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAC,QAAQ,EAAE,OAAO,EAC/C,WAAW,EAAC,QAAQ,EAAE,OAAO,EAAE,WAAW,EAC1C,WAAW,EAAC,QAAQ,EAAE,OAAO,EAAE,WAAW,CAAC,EAC7C,CAAC,MAAM,EAAE,aAAa,EAAE,OAAO,CAAC,EAChC,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,EACzB,CAAC,YAAY,EAAE,UAAU,EAAE,OAAO,CAAC,EACnC,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAC7B,CAAC,MAAM,EAAE,aAAa,EAAE,SAAS,CAAC,EAClC,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,CAAC,EAC5C,CAAC,QAAQ,EAAE,MAAM,EAAE,UAAU,CAAC,CACjC;MACD,IAAIC,cAAa,GAAI,CACjB,OAAO,EACP,MAAM,EACN,KAAK,EACL,OAAO,EACP,QAAQ,EACR,aAAa,EACb,QAAQ,EACR,MAAK,CAER;MACD,IAAIC,EAAC,GAAI,EAAC;MACV,KAAK,IAAIC,IAAI,CAAC,EAAEA,IAAIJ,SAAS,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;QACzC,IAAIE,EAAC,GAAI,EAAE;QACX,KAAK,IAAIC,IAAI,CAAC,EAAEA,IAAIN,OAAO,CAACG,CAAC,CAAC,CAACC,MAAM,EAAEE,CAAC,EAAE,EAAE;UAC1CD,EAAE,CAACE,IAAI,CAAC,KAAK;QACf;QACAL,EAAE,CAACK,IAAI,CACH;UACEC,QAAQ,EAAET,SAAS,CAACI,CAAC,CAAC;UACtBM,OAAO,EAAET,OAAO,CAACG,CAAC,CAAC,CAACO,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,GAAE,GAAIC,IAAI,CAACC,MAAM,EAAE,CAAC;UACvDC,aAAa,EAAEd,cAAc,CAACE,CAAC,CAAC;UAChCa,aAAa,EAAEX;QAEjB,EACJ;MACF;MAEA,OAAOH,EAAC;IAGV,CAAC;IACDe,YAAY,GAAE;MAEZ,IAAI,CAACC,kBAAkB,EAAC;MACxB;MACA,IAAI,IAAI,CAAC1B,oBAAmB,GAAI,IAAI,CAACC,gBAAgB,CAACW,MAAM,GAAC,CAAC,EAAC;QAC1D,IAAI,CAACZ,oBAAmB,IAAK,CAAC;MACnC,OAAO;QACL,IAAI,CAACA,oBAAmB,GAAI,CAAC;QAC7B,IAAI,CAACG,YAAW,GAAI,CAAC;QACrB,IAAI,CAACC,UAAS,GAAI,CAAC;QACnB,IAAI,CAACC,QAAO,GAAI,CAAC;QACjB,IAAI,CAACJ,gBAAe,GAAI,IAAI,CAACC,eAAe,EAAE;MAChD;IACF,CAAC;IACDyB,WAAW,CAACC,MAAM,EAAC;MACjB,IAAI,IAAI,CAAC3B,gBAAgB,CAAC,IAAI,CAACD,oBAAoB,CAAC,CAACuB,aAAY,IAAKK,MAAM,EAAC;QAC3E,IAAI,CAACzB,YAAW,IAAK,CAAC;QACtB,IAAIU,EAAC,GAAI,EAAE;QACX,KAAK,IAAIC,IAAI,CAAC,EAAEA,IAAI,IAAI,CAACb,gBAAgB,CAAC,IAAI,CAACD,oBAAoB,CAAC,CAACwB,aAAa,CAACZ,MAAM,EAAEE,CAAC,EAAE,EAAE;UAC9F,IAAI,IAAI,CAACb,gBAAgB,CAAC,IAAI,CAACD,oBAAoB,CAAC,CAACiB,OAAO,CAACH,CAAC,KAAKc,MAAM,EAAC;YACxEf,EAAE,CAACE,IAAI,CAAC,IAAI;UACd,OACI;YAACF,EAAE,CAACE,IAAI,CAAC,KAAK,CAAC;UAAA;QAErB;QACA,IAAI,CAACd,gBAAgB,CAAC,IAAI,CAACD,oBAAoB,CAAC,CAACwB,aAAY,GAAIX,EAAE;QACnE,IAAI,CAACR,QAAO,GAAK,CAAC,IAAI,CAACL,oBAAoB,GAAC,CAAC,IAAE,IAAI,CAACC,gBAAgB,CAACW,MAAM,GAAE,GAAG;QAChFiB,UAAU,CAAC,MAAM;UACL,IAAI,CAACJ,YAAY,EAAC;QACtB,CAAC,EAAE,GAAG,CAAC;QACf;QACA;QACA;MACF,OACK;QACH,IAAI,CAACrB,UAAS,IAAI,CAAC;QACnB,IAAIS,EAAC,GAAI,EAAE;QACX,KAAK,IAAIC,IAAI,CAAC,EAAEA,IAAI,IAAI,CAACb,gBAAgB,CAAC,IAAI,CAACD,oBAAoB,CAAC,CAACwB,aAAa,CAACZ,MAAM,EAAEE,CAAC,EAAE,EAAE;UAC9FD,EAAE,CAACE,IAAI,CAAC,KAAK;QACf;QACA,IAAI,CAACd,gBAAgB,CAAC,IAAI,CAACD,oBAAoB,CAAC,CAACwB,aAAY,GAAIX,EAAE;MACrE;IAEF,CAAC;IACDa,kBAAkB,GAAE;MAElB,IAAIb,EAAC,GAAI,EAAE;MACT,KAAK,IAAIC,IAAI,CAAC,EAAEA,IAAI,IAAI,CAACb,gBAAgB,CAAC,IAAI,CAACD,oBAAoB,CAAC,CAACwB,aAAa,CAACZ,MAAM,EAAEE,CAAC,EAAE,EAAE;QAC9FD,EAAE,CAACE,IAAI,CAAC,KAAK;MACf;MACA,IAAI,CAACd,gBAAgB,CAAC,IAAI,CAACD,oBAAoB,CAAC,CAACwB,aAAY,GAAIX,EAAE;IAEvE;EAEA;AAEJ","names":["questionContainer","answersContainer","scoreWidget","progressBar","name","components","data","darkModeActive","currentQuestionIndex","questionsAnswers","createQuestions","correctCount","wrongCount","progress","methods","questions","answers","correctAnswers","QA","i","length","cs","s","push","question","choices","sort","a","b","Math","random","correctAnswer","correctStyles","nextQuestion","resetCorrectStyles","checkAnswer","answer","setTimeout"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/learning_vue/one_app_multiple_components/src/components/questionaire/questionsAnswersContianer.vue"],"sourcesContent":["<template>\n<div class=\"mainContainer\">\n  <question-container :question-text=\"questionsAnswers[currentQuestionIndex].question\"\n                      :dark-mode-active=\"darkModeActive\">\n\n  </question-container>\n\n  <answers-container :answers=\"questionsAnswers[currentQuestionIndex].choices\"\n                     :correct-styles=\"questionsAnswers[currentQuestionIndex].correctStyles\"\n                     @answerClicked=\"checkAnswer\" >\n\n  </answers-container>\n  <score-widget :correct=\"correctCount\" :wrong=\"wrongCount\">\n  </score-widget>\n\n  <progress-bar :target-progress=\"progress\">\n\n  </progress-bar>\n\n</div>\n</template>\n\n<script>\nimport questionContainer from \"@/components/questionaire/questionContainer\";\nimport answersContainer from \"@/components/questionaire/answersContainer\";\nimport scoreWidget from \"@/components/questionaire/scoreWidget\";\nimport progressBar from \"@/components/questionaire/progressBar\";\nexport default {\nname: \"questionsAnswersContianer\",\n  components: {questionContainer, answersContainer,\n    scoreWidget, progressBar},\n  data(){\n    return {\n      darkModeActive: false,\n      currentQuestionIndex: 0,\n      questionsAnswers: this.createQuestions(),\n      correctCount: 0,\n      wrongCount: 0,\n      progress: 0,\n\n\n\n    }\n  },\n\n  methods: {\n\n\n    createQuestions(){\n      let questions = [\n          'What is the capital of France?',\n          'What is the currency of Germany?',\n          'Where is the statue of freedom located?',\n          'What is the capital of Egypt?',\n          'What is the capital of Austria?',\n          'What is the currency of Switzerland?',\n          'Where is the Alianz Arena football stadium located?',\n          'What is the capital of Italy?',\n      ];\n      let answers = [\n          ['Berlin', 'Paris', 'Amsterdam','Berlin', 'Paris',\n            'Amsterdam','Berlin', 'Paris', 'Amsterdam',\n            'Amsterdam','Berlin', 'Paris', 'Amsterdam'],\n          ['Euro', 'German Mark', 'Pound'],\n          ['Spain', 'Italy', 'USA'],\n          ['Alexandria', 'Marakesh', 'Cairo'],\n          ['Berlin', 'Paris', 'Vienna'],\n          ['Euro', 'Swiss Frank', 'Dollars'],\n          ['Berlin', 'Munich', 'Hamburg', 'Barcelona'],\n          ['Vienna', 'Rome', 'Budapest'],\n      ];\n      let correctAnswers = [\n          'Paris',\n          'Euro',\n          'USA',\n          'Cairo',\n          'Vienna',\n          'Swiss Frank',\n          'Munich',\n          'Rome'\n\n      ];\n      let QA = []\n      for (let i = 0; i < questions.length; i++) {\n        var cs = [];\n        for (let s = 0; s < answers[i].length; s++) {\n          cs.push(false)\n        }\n        QA.push(\n            {\n              question: questions[i],\n              choices: answers[i].sort((a, b) => 0.5 - Math.random()),\n              correctAnswer: correctAnswers[i],\n              correctStyles: cs\n\n            }\n        )\n      }\n\n      return QA\n\n\n    },\n    nextQuestion(){\n\n      this.resetCorrectStyles()\n      // this.correctAnswer = false;\n      if (this.currentQuestionIndex < this.questionsAnswers.length-1){\n           this.currentQuestionIndex += 1;\n      } else {\n        this.currentQuestionIndex = 0;\n        this.correctCount = 0;\n        this.wrongCount = 0;\n        this.progress = 0;\n        this.questionsAnswers = this.createQuestions();\n      }\n    },\n    checkAnswer(answer){\n      if (this.questionsAnswers[this.currentQuestionIndex].correctAnswer == answer){\n        this.correctCount += 1;\n        var cs = [];\n        for (let s = 0; s < this.questionsAnswers[this.currentQuestionIndex].correctStyles.length; s++) {\n          if (this.questionsAnswers[this.currentQuestionIndex].choices[s] == answer){\n            cs.push(true)\n          }\n          else{cs.push(false)}\n\n        }\n        this.questionsAnswers[this.currentQuestionIndex].correctStyles = cs;\n        this.progress = ((this.currentQuestionIndex+1)/this.questionsAnswers.length)*100;\n        setTimeout(() => {\n                    this.nextQuestion()\n                }, 400);\n        // this.questionsAnswers[this.currentQuestionIndex].correctStyle = true;\n        // this.correctAnswer = true;\n        // this.nextQuestion()\n      }\n      else {\n        this.wrongCount +=1;\n        var cs = [];\n        for (let s = 0; s < this.questionsAnswers[this.currentQuestionIndex].correctStyles.length; s++) {\n          cs.push(false)\n        }\n        this.questionsAnswers[this.currentQuestionIndex].correctStyles = cs;\n      }\n\n    },\n    resetCorrectStyles(){\n\n      var cs = [];\n        for (let s = 0; s < this.questionsAnswers[this.currentQuestionIndex].correctStyles.length; s++) {\n          cs.push(false)\n        }\n        this.questionsAnswers[this.currentQuestionIndex].correctStyles = cs;\n\n    },\n\n    },\n\n}\n</script>\n\n<style scoped>\n.mainContainer{\n  display: flex;\n    flex-direction: column;\n    width: fit-content;\n    height: fit-content;\n  justify-content: flex-start;\n\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}