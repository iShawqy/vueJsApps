{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport questionaireHead from \"@/components/editableQuestionaire/questionaireHead\";\nimport addQuestionForm from \"@/components/editableQuestionaire/addQuestionForm\";\nimport axios from \"axios\";\nexport default {\n  name: \"createQuestionaire\",\n  components: {\n    questionaireHead,\n    addQuestionForm\n  },\n  created() {\n    window.addEventListener('beforeunload', () => {\n      //I CAN ACCESS TO this VARIABLE\n      this.saveQuestionaire();\n    }, false);\n  },\n  data() {\n    return {\n      headFilled: false,\n      questionFormFilled: false,\n      currentQuestionIndex: 0,\n      questionaire: {\n        id: 0,\n        title: \"\",\n        length: 0,\n        creator: \"\",\n        createdOn: \"\",\n        description: \"\",\n        questions: [{\n          question: \"\",\n          choices: [],\n          correctAnswer: \"\",\n          submitted: false\n        }]\n      },\n      questionaireHeadDefault: {\n        creator: '',\n        title: '',\n        description: ''\n      },\n      questionDefault: {\n        inputValue: '',\n        label: 'Question',\n        defaultValueToShow: 'ask a question',\n        width: '400px'\n      },\n      choicesDefault: [{\n        type: 'choice',\n        inputValue: '',\n        label: 'Choice 1',\n        defaultValueToShow: 'Write choice 1',\n        width: '400px',\n        correctAnswer: false\n      }, {\n        type: 'choice',\n        inputValue: '',\n        label: 'Choice 2',\n        defaultValueToShow: 'Write choice 2',\n        width: '400px',\n        correctAnswer: false\n      }, {\n        type: 'choice',\n        inputValue: '',\n        label: 'Choice 3',\n        defaultValueToShow: 'Write choice 3',\n        width: '400px',\n        correctAnswer: false\n      }, {\n        type: 'choice',\n        inputValue: '',\n        label: 'Choice 4',\n        defaultValueToShow: 'Write choice 4',\n        width: '400px',\n        correctAnswer: false\n      }],\n      submitted: false,\n      saveBtnLabel: 'Save questionaire'\n    };\n  },\n  methods: {\n    executeHeadFilled(filled) {\n      this.headFilled = filled;\n    },\n    executeQuestionFormFilled(filled) {\n      this.questionFormFilled = filled;\n    },\n    get() {\n      this.$refs.refQestionaireHead.emitData();\n      this.$refs.refAddQuestionForm.emitData();\n    },\n    updateQuestionaireHeadData(data) {\n      if (this.headFilled) {\n        this.questionaire.title = data.title;\n        this.questionaire.creator = data.creator;\n        this.questionaire.description = data.description;\n      }\n    },\n    updateFormData(data) {\n      if (this.questionFormFilled) {\n        this.questionaire.questions[this.currentQuestionIndex].question = data[0].inputValue;\n        this.questionaire.questions[this.currentQuestionIndex].choices = [];\n        for (let i = 0; i < data[1].length; i++) {\n          this.questionaire.questions[this.currentQuestionIndex].choices.push(data[1][i].inputValue);\n        }\n        this.questionaire.questions[this.currentQuestionIndex].correctAnswer = data[2];\n        this.$toast.success('Question was added successfully', {\n          position: \"bottom\"\n        });\n        this.submitted = true;\n        this.questionaire.questions[this.currentQuestionIndex].submitted = true;\n      }\n    },\n    deleteQuestion() {\n      // this.reset();\n      if (this.questionaire.questions[this.currentQuestionIndex].submitted) {\n        this.questionaire.questions.splice(this.currentQuestionIndex, 1);\n        if (this.currentQuestionIndex > 0) {\n          this.currentQuestionIndex -= 1;\n          this.set();\n        } else {\n          this.appendNewQuesrionDict();\n          this.set();\n        }\n        this.$toast.success('Question was deleted successfully', {\n          position: \"bottom\"\n        });\n      } else {\n        this.$toast.error('Can not delete an unsubmitted question', {\n          position: \"bottom\"\n        });\n      }\n    },\n    appendNewQuesrionDict() {\n      var choices = [];\n      for (let i = 0; i < 4; i++) {\n        choices.push('');\n      }\n      var question = {\n        question: \"\",\n        choices: choices,\n        correctAnswer: \"\"\n      };\n      this.questionaire.questions.push(question);\n    },\n    submitQuestion() {\n      this.get();\n      // if (!this.headFilled || !this.questionFormFilled) {\n      //     this.$toast.error('Please fill-in all data before you can submit', {\n      //     position: \"bottom\"\n      //   });\n      // }\n    },\n\n    addNewQuestion() {\n      if (this.submitted) {\n        if (this.currentQuestionIndex != this.questionaire.questions.length - 1) {\n          this.currentQuestionIndex = this.questionaire.questions.length - 1;\n        }\n        this.appendNewQuesrionDict();\n        this.currentQuestionIndex += 1;\n        this.set();\n        this.submitted = false;\n      } else {\n        this.$toast.error('Please submit the current question first', {\n          position: \"bottom\"\n        });\n      }\n      // this.reset();\n    },\n\n    goBack() {\n      if (this.currentQuestionIndex > 0) {\n        if (!this.questionaire.questions[this.currentQuestionIndex].submitted) {\n          this.getInputStates();\n        }\n        this.currentQuestionIndex -= 1;\n        this.set();\n      } else {\n        this.$toast.error('Can not go back anymore', {\n          position: \"bottom\"\n        });\n      }\n    },\n    goForward() {\n      if (this.currentQuestionIndex < this.questionaire.questions.length - 1) {\n        if (!this.questionaire.questions[this.currentQuestionIndex].submitted) {\n          this.getInputStates();\n        }\n        this.currentQuestionIndex += 1;\n        this.set();\n      } else {\n        this.$toast.error('Can not go forward anymore', {\n          position: \"bottom\"\n        });\n      }\n    },\n    getInputStates() {},\n    reset() {\n      // this.$refs.refQestionaireHead.reset(this.questionaireHeadDefault);\n      var choices = [];\n      for (let i = 0; i < 4; i++) {\n        choices.push('');\n      }\n      var question = {\n        question: \"\",\n        choices: choices,\n        correctAnswer: \"\"\n      };\n      this.$refs.refAddQuestionForm.reset([question.question, choices]);\n    },\n    set() {\n      this.$refs.refAddQuestionForm.reset([this.questionaire.questions[this.currentQuestionIndex].question, this.questionaire.questions[this.currentQuestionIndex].choices]);\n    },\n    saveQuestionaire() {\n      if (this.questionaire.id > 0) {\n        var qLength = this.questionaire.questions.length;\n        this.questionaire.length = qLength;\n        axios({\n          method: 'put',\n          url: 'http://localhost:3004/questionairs/' + this.questionaire.id.toString(),\n          data: this.questionaire\n        }).then(response => {\n          this.questionaire.id = response.data.id;\n          this.$toast.success('Questionaire was updated successfully', {\n            position: \"bottom\"\n          });\n        }).catch(error => {\n          this.$toast.error('Error while updating the questionaire', {\n            position: \"bottom\"\n          });\n        });\n        // .finally(()=>{\n        //\n        //   this.$toast.info('updating done',  {\n        //   position: \"bottom\"})\n        // })\n      } else {\n        if (this.headFilled && this.questionFormFilled) {\n          var qLength = this.questionaire.questions.length;\n          this.questionaire.length = qLength;\n          this.questionaire.createdOn = Date.now().toString();\n          axios({\n            method: 'post',\n            url: 'http://localhost:3004/questionairs',\n            data: this.questionaire\n          }).then(response => {\n            this.questionaire.id = response.data.id;\n            this.saveBtnLabel = 'Update questionaire';\n            this.$toast.success('Questionaire was saved successfully', {\n              position: \"bottom\"\n            });\n          }).catch(error => {\n            this.$toast.error('Error while saving the questionaire', {\n              position: \"bottom\"\n            });\n          });\n          // .finally(()=>{\n          //   this.$toast.info('saving done',  {\n          //   position: \"bottom\"})\n          // })\n        } else {\n          this.$toast.error('Please fill-in all data before you can save the questionaire', {\n            position: \"bottom\"\n          });\n        }\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["questionaireHead","addQuestionForm","axios","name","components","created","window","addEventListener","saveQuestionaire","data","headFilled","questionFormFilled","currentQuestionIndex","questionaire","id","title","length","creator","createdOn","description","questions","question","choices","correctAnswer","submitted","questionaireHeadDefault","questionDefault","inputValue","label","defaultValueToShow","width","choicesDefault","type","saveBtnLabel","methods","executeHeadFilled","filled","executeQuestionFormFilled","get","$refs","refQestionaireHead","emitData","refAddQuestionForm","updateQuestionaireHeadData","updateFormData","i","push","$toast","success","position","deleteQuestion","splice","set","appendNewQuesrionDict","error","submitQuestion","addNewQuestion","goBack","getInputStates","goForward","reset","qLength","method","url","toString","then","response","catch","Date","now"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/git_vuejs_apps/one_app_multiple_components/src/components/editableQuestionaire/createQuestionaire.vue"],"sourcesContent":["<template>\n<div class=\"mainContainer\">\n  <questionaire-head @filled=\"executeHeadFilled\"\n                     ref=\"refQestionaireHead\"\n                     @questionaireHeadData=\"updateQuestionaireHeadData\"\n  >\n  </questionaire-head>\n  <add-question-form @filled=\"executeQuestionFormFilled\"\n                     ref=\"refAddQuestionForm\"\n                     @formData=\"updateFormData\"\n                     @inputsStates=\"getInputStates\"\n  ></add-question-form>\n  <div class=\"actionButtonsContainer\">\n\n    <button class=\"BtnStyle btnBlack\"  @click=\"submitQuestion\">\n    Submit\n  </button>\n\n\n  </div>\n\n  <div class=\"actionButtonsContainer\">\n    <button class=\"BtnStyle btnBlack\" @click=\"goBack\">\n      &lt;\n    </button>\n    <button class=\"BtnStyle btnRed\"  @click=\"deleteQuestion\">\n    delete question\n  </button>\n\n    <button class=\"BtnStyle btnBlue\"  @click=\"addNewQuestion\">\n    +new question\n    </button>\n\n\n\n\n    <button class=\"BtnStyle btnBlack\" @click=\"goForward\">\n      &gt;\n    </button>\n  </div>\n\n  <button class=\"BtnStyle btnGreen\" @click=\"saveQuestionaire\">\n    {{saveBtnLabel}}\n  </button>\n\n\n\n\n</div>\n</template>\n\n<script>\nimport questionaireHead from \"@/components/editableQuestionaire/questionaireHead\";\nimport addQuestionForm from \"@/components/editableQuestionaire/addQuestionForm\";\nimport axios from \"axios\";\n\nexport default {\nname: \"createQuestionaire\",\ncomponents:{questionaireHead, addQuestionForm},\ncreated() {\n        window.addEventListener('beforeunload', () => {\n            //I CAN ACCESS TO this VARIABLE\n            this.saveQuestionaire();\n        }, false)\n    },\ndata(){\n  return {\n    headFilled: false,\n    questionFormFilled: false,\n    currentQuestionIndex: 0,\n    questionaire: {\n      id: 0,\n      title: \"\",\n      length: 0,\n      creator: \"\",\n      createdOn: \"\",\n      description: \"\",\n      questions : [\n          {\n          question: \"\",\n          choices : [],\n          correctAnswer: \"\",\n          submitted: false,\n        }\n      ]\n    },\n    questionaireHeadDefault: {\n      creator: '',\n      title: '',\n      description: '',\n    },\n    questionDefault: {\n      inputValue: '',\n        label: 'Question',\n        defaultValueToShow: 'ask a question',\n        width: '400px',\n    },\n    choicesDefault: [\n        {\n          type: 'choice',\n        inputValue: '',\n        label: 'Choice 1',\n        defaultValueToShow: 'Write choice 1',\n        width: '400px',\n          correctAnswer: false,\n      },\n        {\n          type: 'choice',\n        inputValue: '',\n        label: 'Choice 2',\n        defaultValueToShow: 'Write choice 2',\n        width: '400px',\n          correctAnswer: false,\n      },\n        {\n          type: 'choice',\n        inputValue: '',\n        label: 'Choice 3',\n        defaultValueToShow: 'Write choice 3',\n        width: '400px',\n          correctAnswer: false,\n      },\n        {\n          type: 'choice',\n        inputValue: '',\n        label: 'Choice 4',\n        defaultValueToShow: 'Write choice 4',\n        width: '400px',\n          correctAnswer: false,\n      }\n    ],\n    submitted: false,\n    saveBtnLabel: 'Save questionaire'\n\n  }\n},\nmethods:{\n  executeHeadFilled(filled){\n    this.headFilled = filled;\n  },\n  executeQuestionFormFilled(filled){\n    this.questionFormFilled = filled;\n  },\n\n  get(){\n    this.$refs.refQestionaireHead.emitData();\n    this.$refs.refAddQuestionForm.emitData();\n  },\n  updateQuestionaireHeadData(data){\n    if (this.headFilled) {\n      this.questionaire.title = data.title;\n      this.questionaire.creator = data.creator;\n      this.questionaire.description = data.description;\n    }\n\n\n  },\n\n  updateFormData(data){\n    if (this.questionFormFilled) {\n      this.questionaire.questions[this.currentQuestionIndex].question = data[0].inputValue;\n      this.questionaire.questions[this.currentQuestionIndex].choices = [];\n      for (let i=0; i<data[1].length; i++) {\n        this.questionaire.questions[this.currentQuestionIndex].choices.push(data[1][i].inputValue)\n      }\n      this.questionaire.questions[this.currentQuestionIndex].correctAnswer = data[2];\n\n      this.$toast.success('Question was added successfully', {\n          position: \"bottom\"\n        });\n      this.submitted = true;\n      this.questionaire.questions[this.currentQuestionIndex].submitted = true;\n\n    }\n\n  },\n\n  deleteQuestion(){\n    // this.reset();\n    if (this.questionaire.questions[this.currentQuestionIndex].submitted){\n      this.questionaire.questions.splice(this.currentQuestionIndex, 1);\n      if (this.currentQuestionIndex > 0) {\n        this.currentQuestionIndex -= 1;\n        this.set();\n      } else {\n        this.appendNewQuesrionDict()\n        this.set()\n      }\n      this.$toast.success('Question was deleted successfully', {\n        position: \"bottom\"\n      });\n    } else {\n      this.$toast.error('Can not delete an unsubmitted question', {\n        position: \"bottom\"\n      });\n    }\n\n\n\n  },\n\n  appendNewQuesrionDict(){\n    var choices = [];\n    for (let i=0; i<4;i++){\n      choices.push('')\n    }\n    var question = {\n          question: \"\",\n          choices : choices,\n          correctAnswer: \"\"\n        }\n    this.questionaire.questions.push(question)\n\n  },\n\n  submitQuestion(){\n    this.get();\n    // if (!this.headFilled || !this.questionFormFilled) {\n    //     this.$toast.error('Please fill-in all data before you can submit', {\n    //     position: \"bottom\"\n    //   });\n    // }\n\n\n  },\n\n  addNewQuestion(){\n    if (this.submitted){\n      if (this.currentQuestionIndex != this.questionaire.questions.length-1){\n        this.currentQuestionIndex = this.questionaire.questions.length-1;\n      }\n      this.appendNewQuesrionDict();\n      this.currentQuestionIndex += 1;\n      this.set();\n      this.submitted = false;\n    } else {\n      this.$toast.error('Please submit the current question first', {\n        position: \"bottom\"\n      });\n    }\n    // this.reset();\n\n  },\n\n  goBack(){\n    if (this.currentQuestionIndex > 0) {\n\n      if (!this.questionaire.questions[this.currentQuestionIndex].submitted){\n        this.getInputStates()\n      }\n      this.currentQuestionIndex -= 1;\n      this.set()\n    } else {\n      this.$toast.error('Can not go back anymore', {\n          position: \"bottom\"\n        });\n    }\n  },\n\n  goForward() {\n    if (this.currentQuestionIndex < this.questionaire.questions.length-1) {\n      if (!this.questionaire.questions[this.currentQuestionIndex].submitted){\n        this.getInputStates()\n      }\n      this.currentQuestionIndex += 1;\n      this.set();\n    } else {\n      this.$toast.error('Can not go forward anymore', {\n          position: \"bottom\"\n        });\n    }\n  },\n\n  getInputStates(){\n\n  },\n  reset() {\n    // this.$refs.refQestionaireHead.reset(this.questionaireHeadDefault);\n    var choices = [];\n    for (let i=0; i<4;i++){\n      choices.push('')\n    }\n    var question = {\n          question: \"\",\n          choices : choices,\n          correctAnswer: \"\"\n        }\n    this.$refs.refAddQuestionForm.reset([question.question, choices]);\n    },\n\n  set(){\n    this.$refs.refAddQuestionForm.reset([this.questionaire.questions[this.currentQuestionIndex].question,\n      this.questionaire.questions[this.currentQuestionIndex].choices]);\n  },\n\n  saveQuestionaire(){\n    if (this.questionaire.id>0){\n      var qLength = this.questionaire.questions.length;\n      this.questionaire.length = qLength;\n      axios({\n        method: 'put',\n        url:'http://localhost:3004/questionairs/' + this.questionaire.id.toString(),\n        data: this.questionaire\n      })\n      .then(response => {\n        this.questionaire.id = response.data.id;\n        this.$toast.success('Questionaire was updated successfully',  {\n        position: \"bottom\"})\n      })\n\n      .catch(error => {\n\n        this.$toast.error('Error while updating the questionaire', {\n        position: \"bottom\"});\n      })\n      // .finally(()=>{\n      //\n      //   this.$toast.info('updating done',  {\n      //   position: \"bottom\"})\n      // })\n    } else {\n      if (this.headFilled && this.questionFormFilled) {\n\n      var qLength = this.questionaire.questions.length;\n      this.questionaire.length = qLength;\n      this.questionaire.createdOn = Date.now().toString()\n\n      axios({\n        method: 'post',\n        url:'http://localhost:3004/questionairs',\n        data: this.questionaire\n      })\n      .then(response => {\n        this.questionaire.id = response.data.id;\n        this.saveBtnLabel = 'Update questionaire';\n        this.$toast.success('Questionaire was saved successfully',  {\n        position: \"bottom\"})\n      })\n\n      .catch(error => {\n\n        this.$toast.error('Error while saving the questionaire', {\n        position: \"bottom\"});\n      })\n      // .finally(()=>{\n      //   this.$toast.info('saving done',  {\n      //   position: \"bottom\"})\n      // })\n\n    } else {\n      this.$toast.error('Please fill-in all data before you can save the questionaire', {\n        position: \"bottom\"\n      });\n    }\n    }\n\n  },\n\n\n\n\n\n},\n\n}\n</script>\n\n<style scoped>\n.mainContainer{\n  display: flex;\n  width: fit-content;\n  height: fit-content;\n  /*flex-direction: column;*/\n  /*justify-content: center;*/\n  /*align-items: center;*/\n}\n\n.actionButtonsContainer{\n  display: flex;\n  width: 500px;\n  height: 30px;\n  flex-direction: row;\n  justify-content: space-around;\n  flex-wrap: wrap;\n  margin: 5px;\n}\n\n.BtnStyle{\n  height: 30px;\n  width: fit-content;\n  border-radius: 10px;\n  font-size: 20px;\n  font-family: Arial;\n  border: none;\n  text-align: center;\n  text-decoration: none;\n  opacity: 0.6;\n  transition: 0.3s;\n  margin: 5px;\n  color: white;\n}\n\n.BtnStyle:hover{\n  opacity: 1;\n\n}\n\n.btnGreen{\n  background-color: #00c631;\n}\n\n.btnBlue{\n  background-color: #0022ff;\n}\n.btnRed{\n  background-color: #ff0000;\n}\n\n.btnBlack{\n\n  background-color: #000000;\n  color: white;\n}\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}