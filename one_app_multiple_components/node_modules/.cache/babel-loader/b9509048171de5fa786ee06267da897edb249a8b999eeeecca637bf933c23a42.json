{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport squareElement from \"@/components/movableElements/squareElement\";\nimport rectangleElement from \"@/components/movableElements/rectangleElement\";\nimport CircleElement from \"@/components/movableElements/circleElement\";\nimport elementsBrowser from \"@/components/movableElements/elementsBrowser\";\nexport default {\n  name: \"mainMovableElements\",\n  components: {\n    CircleElement,\n    squareElement,\n    rectangleElement,\n    elementsBrowser\n  },\n  data() {\n    return {\n      mousePosX: 0,\n      mousePosY: 0,\n      elements: {\n        circle: [],\n        square: [],\n        rectangle: []\n      },\n      selectedItem: null\n    };\n  },\n  methods: {\n    updateMousePos(event) {\n      this.mousePosX = event.clientX;\n      this.mousePosY = event.clientY;\n    },\n    addCircle() {\n      var type = 'circle';\n      this.elements[type].push({\n        type: type,\n        id: this.elements[type].length + 1,\n        canMove: true,\n        backgroundColor: 'blue'\n      });\n    },\n    handleSelectedElement(element) {\n      if (element != null) {\n        this.selectedItem = element;\n      } else {\n        this.selectedItem = null;\n      }\n    },\n    handleKeyPress(event) {\n      if (event.key == \"Delete\") {\n        if (this.selectedItem != null) {\n          var toDeleteIdx = 0;\n          for (let i = 0; i < this.elements[this.selectedItem.type].length; i++) {\n            if (this.selectedItem.id == this.elements[this.selectedItem.type][i].id) {\n              toDeleteIdx = i;\n              break;\n            }\n          }\n          this.elements[this.selectedItem.type].splice(toDeleteIdx, 1);\n        }\n      }\n    },\n    addNewElement(type) {\n      if (type == 'circle') {\n        this.addCircle();\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";AA+BA,OAAOA,aAAY,MAAO,4CAA4C;AACtE,OAAOC,gBAAe,MAAO,+CAA+C;AAC5E,OAAOC,aAAY,MAAO,4CAA4C;AACtE,OAAOC,eAAc,MAAO,8CAA8C;AAE1E,eAAe;EACfC,IAAI,EAAE,qBAAqB;EACzBC,UAAU,EAAC;IAACH,aAAa;IAAEF,aAAa;IACtCC,gBAAgB;IAAEE;EAAe,CAAC;EACpCG,IAAI,GAAE;IACN,OAAO;MACLC,SAAS,EAAE,CAAC;MACZC,SAAS,EAAE,CAAC;MACZC,QAAQ,EAAE;QACRC,MAAM,EAAE,EAAE;QACVC,MAAM,EAAE,EAAE;QACVC,SAAS,EAAC;MACZ,CAAC;MAEDC,YAAY,EAAE;IAChB;EACA,CAAC;EACDC,OAAO,EAAC;IACRC,cAAc,CAACC,KAAK,EAAC;MACnB,IAAI,CAACT,SAAQ,GAAIS,KAAK,CAACC,OAAO;MAC9B,IAAI,CAACT,SAAQ,GAAIQ,KAAK,CAACE,OAAO;IAChC,CAAC;IACDC,SAAS,GAAE;MACT,IAAIC,IAAG,GAAI,QAAO;MAClB,IAAI,CAACX,QAAQ,CAACW,IAAI,CAAC,CAACC,IAAI,CACpB;QACED,IAAI,EAAEA,IAAI;QACVE,EAAE,EAAE,IAAI,CAACb,QAAQ,CAACW,IAAI,CAAC,CAACG,MAAK,GAAG,CAAC;QACjCC,OAAO,EAAE,IAAI;QACbC,eAAe,EAAE;MAEnB,EACJ;IACA,CAAC;IACHC,qBAAqB,CAACC,OAAO,EAAC;MAE5B,IAAIA,OAAM,IAAK,IAAI,EAAE;QACnB,IAAI,CAACd,YAAW,GAAIc,OAAO;MAC7B,OAAO;QACL,IAAI,CAACd,YAAW,GAAI,IAAI;MAC1B;IAEF,CAAC;IACDe,cAAc,CAACZ,KAAK,EAAC;MACnB,IAAIA,KAAK,CAACa,GAAE,IAAK,QAAQ,EAAC;QACxB,IAAI,IAAI,CAAChB,YAAW,IAAK,IAAI,EAAC;UAC5B,IAAIiB,WAAU,GAAI,CAAC;UACnB,KAAK,IAAIC,IAAI,CAAC,EAAEA,IAAI,IAAI,CAACtB,QAAQ,CAAC,IAAI,CAACI,YAAY,CAACO,IAAI,CAAC,CAACG,MAAM,EAAEQ,CAAC,EAAE,EAAE;YACrE,IAAI,IAAI,CAAClB,YAAY,CAACS,EAAC,IAAK,IAAI,CAACb,QAAQ,CAAC,IAAI,CAACI,YAAY,CAACO,IAAI,CAAC,CAACW,CAAC,CAAC,CAACT,EAAE,EAAE;cACvEQ,WAAU,GAAIC,CAAC;cACf;YACF;UACF;UACA,IAAI,CAACtB,QAAQ,CAAC,IAAI,CAACI,YAAY,CAACO,IAAI,CAAC,CAACY,MAAM,CAACF,WAAW,EAAE,CAAC;QAC7D;MACF;IAEF,CAAC;IACDG,aAAa,CAACb,IAAI,EAAC;MAEjB,IAAIA,IAAG,IAAK,QAAQ,EAAC;QACnB,IAAI,CAACD,SAAS,EAAC;MACjB;IACF;EAGA;AACF","names":["squareElement","rectangleElement","CircleElement","elementsBrowser","name","components","data","mousePosX","mousePosY","elements","circle","square","rectangle","selectedItem","methods","updateMousePos","event","clientX","clientY","addCircle","type","push","id","length","canMove","backgroundColor","handleSelectedElement","element","handleKeyPress","key","toDeleteIdx","i","splice","addNewElement"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/learning_vue/one_app_multiple_components/src/components/movableElements/mainMovableElements.vue"],"sourcesContent":["<template>\n<div class=\"mainContainer\" @mousemove=\"updateMousePos($event)\"\n     @click=\"handleSelectedElement(null)\"\n     @keyup=\"handleKeyPress($event)\" tabindex=\"0\"\n>\n  <elements-browser class=\"elementsBrowser animate__animated animate__fadeInLeft\"\n\n                    @addElement=\"addNewElement\" v-if=\"mousePosX<100\">\n\n  </elements-browser>\n<!--<square-element  :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"-->\n<!--                :can-move=\"true\" background-color=\"red\">-->\n<!--</square-element>-->\n  <circle-element  v-for=\"element in elements.circle\"\n                   :id=\"element.id\"\n                   :key=\"element.id\"\n                   :can-move=\"element.canMove\"\n                   :background-color=\"element.backgroundColor\"\n                   @click=\"handleSelectedElement(element)\"\n                   v-on:click.stop\n                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"\n  >\n</circle-element>\n\n<!--  <rectangle-element  :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"-->\n<!--                :can-move=\"true\" background-color=\"blue\">-->\n<!--</rectangle-element>-->\n  </div>\n</template>\n\n<script>\nimport squareElement from \"@/components/movableElements/squareElement\";\nimport rectangleElement from \"@/components/movableElements/rectangleElement\";\nimport CircleElement from \"@/components/movableElements/circleElement\";\nimport elementsBrowser from \"@/components/movableElements/elementsBrowser\";\n\nexport default {\nname: \"mainMovableElements\",\n  components:{CircleElement, squareElement,\n    rectangleElement, elementsBrowser},\n  data(){\n  return {\n    mousePosX: 0,\n    mousePosY: 0,\n    elements: {\n      circle: [],\n      square: [],\n      rectangle:[],\n    },\n\n    selectedItem: null,\n  }\n  },\n  methods:{\n  updateMousePos(event){\n    this.mousePosX = event.clientX;\n    this.mousePosY = event.clientY;\n  },\n  addCircle(){\n    var type = 'circle'\n    this.elements[type].push(\n        {\n          type: type,\n          id: this.elements[type].length +1,\n          canMove: true,\n          backgroundColor: 'blue',\n\n        }\n    )\n    },\n  handleSelectedElement(element){\n\n    if (element != null) {\n      this.selectedItem = element;\n    } else {\n      this.selectedItem = null;\n    }\n\n  },\n  handleKeyPress(event){\n    if (event.key == \"Delete\"){\n      if (this.selectedItem != null){\n        var toDeleteIdx = 0;\n        for (let i = 0; i < this.elements[this.selectedItem.type].length; i++) {\n          if (this.selectedItem.id == this.elements[this.selectedItem.type][i].id) {\n            toDeleteIdx = i;\n            break;\n          }\n        }\n        this.elements[this.selectedItem.type].splice(toDeleteIdx, 1)\n      }\n    }\n\n  },\n  addNewElement(type){\n\n    if (type == 'circle'){\n      this.addCircle()\n    }\n  },\n\n\n  }\n}\n</script>\n\n<style scoped>\n    .mainContainer{\n    position: absolute;\n    width: 100%;\n    height: 100%;\n      background-color: #ffffff;\n  }\n\n    .elementsBrowser{\n      position: absolute;\n      top: 25%;\n      -ms-transform: translateY(-50%);\n      transform: translateY(-50%);\n    }\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}