{"ast":null,"code":"import squareElement from \"@/components/movableElements/squareElement\";\nimport rectangleElement from \"@/components/movableElements/rectangleElement\";\nimport CircleElement from \"@/components/movableElements/circleElement\";\nimport elementsBrowser from \"@/components/movableElements/elementsBrowser\";\nexport default {\n  name: \"mainMovableElements\",\n  components: {\n    CircleElement,\n    squareElement,\n    rectangleElement,\n    elementsBrowser\n  },\n  data() {\n    return {\n      mousePosX: 0,\n      mousePosY: 0,\n      elements: {\n        circle: {},\n        square: {},\n        rectangle: {}\n      },\n      elementsHighestId: 0,\n      elementsCount: 0,\n      elementsDefaultBackgroundColors: {\n        circle: 'red',\n        square: 'blue',\n        rectangle: 'green'\n      },\n      selectedItems: {},\n      multipleSelected: false\n    };\n  },\n  mounted() {\n    setInterval(() => {\n      this.updateMultipleSelected();\n    }, 50);\n  },\n  methods: {\n    updateMousePos(event) {\n      this.mousePosX = event.clientX;\n      this.mousePosY = event.clientY;\n    },\n    handleSelectedElement(element, event) {\n      for (const [type, els] of Object.entries(this.elements)) {\n        for (const [id, elData] of Object.entries(this.elements[type])) {\n          if (element != null) {\n            if (id == element.id) {\n              if (!this.elements[type][id].selected) {\n                this.elements[type][id].selected = true;\n                this.selectedItems[id] = elData;\n              }\n            } else {\n              if (!event.shiftKey) {\n                this.elements[type][id].selected = false;\n                if (this.selectedItems.hasOwnProperty(id)) {\n                  delete this.selectedItems[id];\n                }\n              }\n            }\n          } else {\n            this.elements[type][id].selected = false;\n            if (this.selectedItems.hasOwnProperty(id)) {\n              delete this.selectedItems[id];\n            }\n          }\n        }\n      }\n    },\n    handleKeyPress(event) {\n      if (event.key == \"Delete\") {\n        for (const [id, value] of Object.entries(this.selectedItems)) {\n          delete this.elements[value.type][id];\n          if (this.selectedItems.hasOwnProperty(id)) {\n            delete this.selectedItems[id];\n          }\n          this.elementsCount -= 1;\n        }\n      }\n    },\n    addNewElement(type) {\n      var elementId = this.elementsHighestId + 1;\n      var elementData = {\n        type: type,\n        id: elementId,\n        canMove: true,\n        backgroundColor: this.elementsDefaultBackgroundColors[type],\n        selected: false\n      };\n      this.elements[type][elementId] = elementData;\n      this.elementsHighestId += 1;\n      this.elementsCount += 1;\n    },\n    updateMultipleSelected() {\n      if (Object.keys(this.selectedItems).length > 1) {\n        this.multipleSelected = true;\n      } else {\n        this.multipleSelected = false;\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["squareElement","rectangleElement","CircleElement","elementsBrowser","name","components","data","mousePosX","mousePosY","elements","circle","square","rectangle","elementsHighestId","elementsCount","elementsDefaultBackgroundColors","selectedItems","multipleSelected","mounted","setInterval","updateMultipleSelected","methods","updateMousePos","event","clientX","clientY","handleSelectedElement","element","type","els","Object","entries","id","elData","selected","shiftKey","hasOwnProperty","handleKeyPress","key","value","addNewElement","elementId","elementData","canMove","backgroundColor","keys","length"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/learning_vue/one_app_multiple_components/src/components/movableElements/mainMovableElements.vue"],"sourcesContent":["<template>\n<div class=\"mainContainer\" @mousemove=\"updateMousePos($event)\"\n     @click=\"handleSelectedElement(null)\"\n     @keyup=\"handleKeyPress($event)\" tabindex=\"0\"\n\n>\n  <elements-browser class=\"elementsBrowser animate__animated animate__fadeInLeft\"\n\n                    @addElement=\"addNewElement\" v-if=\"mousePosX<100\">\n\n  </elements-browser>\n<!--<square-element  :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"-->\n<!--                :can-move=\"true\" background-color=\"red\">-->\n<!--</square-element>-->\n  <circle-element  v-for=\"element in elements.circle\"\n                   :id=\"element.id\"\n                   :key=\"element.id\"\n                   :can-move=\"element.canMove\"\n                   :background-color=\"element.backgroundColor\"\n                   @click=\"handleSelectedElement(element, $event)\"\n                   v-on:click.stop :selected-flag=\"element.selected\"\n                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"\n                   :multiple-selected=\"multipleSelected\"\n  >\n</circle-element>\n\n\n    <square-element  v-for=\"element in elements.square\"\n                   :id=\"element.id\"\n                   :key=\"element.id\"\n                   :can-move=\"element.canMove\"\n                   :background-color=\"element.backgroundColor\"\n                   @click=\"handleSelectedElement(element, $event)\"\n                   v-on:click.stop :selected-flag=\"element.selected\"\n                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"\n  >\n</square-element>\n\n   <rectangle-element  v-for=\"element in elements.rectangle\"\n                   :id=\"element.id\"\n                   :key=\"element.id\"\n                   :can-move=\"element.canMove\"\n                   :background-color=\"element.backgroundColor\"\n                   @click=\"handleSelectedElement(element, $event)\"\n                   v-on:click.stop :selected-flag=\"element.selected\"\n                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"\n  >\n</rectangle-element>\n<!--  <rectangle-element  :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"-->\n<!--                :can-move=\"true\" background-color=\"blue\">-->\n<!--</rectangle-element>-->\n  </div>\n</template>\n\n<script>\nimport squareElement from \"@/components/movableElements/squareElement\";\nimport rectangleElement from \"@/components/movableElements/rectangleElement\";\nimport CircleElement from \"@/components/movableElements/circleElement\";\nimport elementsBrowser from \"@/components/movableElements/elementsBrowser\";\n\nexport default {\nname: \"mainMovableElements\",\n  components:{CircleElement, squareElement,\n    rectangleElement, elementsBrowser},\n  data(){\n  return {\n    mousePosX: 0,\n    mousePosY: 0,\n    elements: {\n      circle: {},\n      square: {},\n      rectangle: {},\n    },\n    elementsHighestId: 0,\n    elementsCount: 0,\n    elementsDefaultBackgroundColors: {\n      circle: 'red',\n      square: 'blue',\n      rectangle: 'green'\n    },\n    selectedItems: {},\n    multipleSelected: false,\n  }\n  },\n  mounted() {\n    setInterval(() => {\n              this.updateMultipleSelected();\n            }, 50);\n  },\n  methods:{\n    updateMousePos(event){\n      this.mousePosX = event.clientX;\n      this.mousePosY = event.clientY;\n    },\n    handleSelectedElement(element, event){\n        for (const [type, els] of Object.entries(this.elements)) {\n          for (const [id, elData] of Object.entries(this.elements[type])) {\n            if (element != null) {\n              if (id == element.id) {\n                if (!this.elements[type][id].selected){\n                  this.elements[type][id].selected = true;\n                  this.selectedItems[id] = elData;\n                }\n              }\n              else {\n                if (!event.shiftKey) {\n                  this.elements[type][id].selected = false;\n                  if (this.selectedItems.hasOwnProperty(id)){\n                    delete this.selectedItems[id]\n                  }\n\n                }\n              }\n            }\n            else {\n              this.elements[type][id].selected = false;\n              if (this.selectedItems.hasOwnProperty(id)){\n                    delete this.selectedItems[id]\n                  }\n\n            }\n          }\n        }\n    },\n    handleKeyPress(event) {\n      if (event.key == \"Delete\") {\n        for (const [id, value] of Object.entries(this.selectedItems)) {\n          delete this.elements[value.type][id];\n          if (this.selectedItems.hasOwnProperty(id)){\n                    delete this.selectedItems[id]\n                  }\n          this.elementsCount -= 1;\n        }\n      }\n    },\n    addNewElement(type){\n      var elementId = this.elementsHighestId +1;\n      var elementData = {\n            type: type,\n            id: elementId,\n            canMove: true,\n            backgroundColor: this.elementsDefaultBackgroundColors[type],\n            selected: false,\n      }\n      this.elements[type][elementId] = elementData\n      this.elementsHighestId += 1\n      this.elementsCount += 1\n    },\n    updateMultipleSelected(){\n      if (Object.keys(this.selectedItems).length > 1){\n        this.multipleSelected = true;\n      } else {\n        this.multipleSelected = false;\n      }\n    },\n\n  },\n\n}\n</script>\n\n<style scoped>\n    .mainContainer{\n    position: absolute;\n    width: 100%;\n    height: 100%;\n      background-color: #ffffff;\n  }\n\n    .elementsBrowser{\n      position: absolute;\n      top: 25%;\n      -ms-transform: translateY(-50%);\n      transform: translateY(-50%);\n    }\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}