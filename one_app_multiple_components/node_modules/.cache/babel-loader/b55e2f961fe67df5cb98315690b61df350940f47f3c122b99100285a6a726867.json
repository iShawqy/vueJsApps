{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, withModifiers as _withModifiers, createVNode as _createVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_elements_browser = _resolveComponent(\"elements-browser\");\n  const _component_circle_element = _resolveComponent(\"circle-element\");\n  const _component_lasso_elements_selector = _resolveComponent(\"lasso-elements-selector\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"mainContainer\",\n    onMousemove: _cache[3] || (_cache[3] = $event => $options.updateMousePos($event)),\n    onClick: _cache[4] || (_cache[4] = $event => $options.executeParentClick($event)),\n    onKeyup: _cache[5] || (_cache[5] = $event => $options.handleKeyPress($event)),\n    tabindex: \"0\",\n    onMousedown: _cache[6] || (_cache[6] = $event => $options.executeParentMouseDown($event)),\n    onMouseup: _cache[7] || (_cache[7] = $event => $options.executeParentMouseUp($event))\n  }, [_createCommentVNode(\"&gt;\"), $data.mousePosX < 100 ? (_openBlock(), _createBlock(_component_elements_browser, {\n    key: 0,\n    class: \"elementsBrowser animate__animated animate__fadeInLeft\",\n    onAddElement: $options.addNewElement\n  }, null, 8 /* PROPS */, [\"onAddElement\"])) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.elements.circle, element => {\n    return _openBlock(), _createBlock(_component_circle_element, {\n      id: element.id,\n      key: element.id,\n      moving: element.moving,\n      resizing: element.resizing,\n      \"background-color\": element.backgroundColor,\n      width: element.width,\n      heigh: element.height,\n      onMousedown: [$event => $options.executeElementMouseDown(element, $event), _cache[1] || (_cache[1] = _withModifiers(() => {}, [\"stop\"]))],\n      onMouseup: [$event => $options.executeElementMouseUp(element, $event), _cache[2] || (_cache[2] = _withModifiers(() => {}, [\"stop\"]))],\n      onClick: [$event => $options.executeElementClick(element, $event), _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"stop\"]))],\n      selected: element.selected,\n      \"mouse-pos-x\": $data.mousePosX,\n      \"mouse-pos-y\": $data.mousePosY,\n      onDblclick: $event => $options.resize(element),\n      \"parent-key-event\": $data.keyEvent,\n      onElementCenterXY: $options.setElementCenterXY,\n      onElementDimensions: $options.setElementDimensions\n    }, null, 8 /* PROPS */, [\"id\", \"moving\", \"resizing\", \"background-color\", \"width\", \"heigh\", \"onMousedown\", \"onMouseup\", \"onClick\", \"selected\", \"mouse-pos-x\", \"mouse-pos-y\", \"onDblclick\", \"parent-key-event\", \"onElementCenterXY\", \"onElementDimensions\"]);\n  }), 128 /* KEYED_FRAGMENT */)), _createVNode(_component_lasso_elements_selector, {\n    \"mouse-pos-x\": $data.mousePosX,\n    \"mouse-pos-y\": $data.mousePosY,\n    selecting: $data.lassoSelecting,\n    onLassoSelectorDone: $options.lassoSelectElements\n  }, null, 8 /* PROPS */, [\"mouse-pos-x\", \"mouse-pos-y\", \"selecting\", \"onLassoSelectorDone\"]), _createCommentVNode(\"    <square-element  v-for=\\\"element in elements.square\\\"\"), _createCommentVNode(\"                   :id=\\\"element.id\\\"\"), _createCommentVNode(\"                   :key=\\\"element.id\\\"\"), _createCommentVNode(\"                   :can-move=\\\"element.canMove\\\"\"), _createCommentVNode(\"                   :background-color=\\\"element.backgroundColor\\\"\"), _createCommentVNode(\"                   @click=\\\"executeElementMouseDown(element, $event)\\\"\"), _createCommentVNode(\"                   v-on:click.stop :selected-flag=\\\"element.selected\\\"\"), _createCommentVNode(\"                   :mouse-pos-x=\\\"mousePosX\\\" :mouse-pos-y=\\\"mousePosY\\\"\"), _createCommentVNode(\"                   :multiple-selected=\\\"multipleSelected\\\"\"), _createCommentVNode(\"  >\"), _createCommentVNode(\"</square-element>\"), _createCommentVNode(\"   <rectangle-element  v-for=\\\"element in elements.rectangle\\\"\"), _createCommentVNode(\"                   :id=\\\"element.id\\\"\"), _createCommentVNode(\"                   :key=\\\"element.id\\\"\"), _createCommentVNode(\"                   :can-move=\\\"element.canMove\\\"\"), _createCommentVNode(\"                   :background-color=\\\"element.backgroundColor\\\"\"), _createCommentVNode(\"                   @click=\\\"executeElementMouseDown(element, $event)\\\"\"), _createCommentVNode(\"                   v-on:click.stop :selected-flag=\\\"element.selected\\\"\"), _createCommentVNode(\"                   :mouse-pos-x=\\\"mousePosX\\\" :mouse-pos-y=\\\"mousePosY\\\"\"), _createCommentVNode(\"                   :multiple-selected=\\\"multipleSelected\\\"\"), _createCommentVNode(\"  >\"), _createCommentVNode(\"</rectangle-element>\")], 32 /* HYDRATE_EVENTS */);\n}","map":{"version":3,"mappings":";;;;;uBACAA,oBAkEQ;IAlEHC,KAAK,EAAC,eAAe;IAAEC,WAAS,sCAAEC,uBAAc,CAACC,MAAM;IACtDC,OAAK,sCAAEF,2BAAkB,CAACC,MAAM;IAChCE,OAAK,sCAAEH,uBAAc,CAACC,MAAM;IAAGG,QAAQ,EAAC,GAAG;IAC3CC,WAAS,sCAAEL,+BAAsB,CAACC,MAAM;IACxCK,SAAO,sCAAEN,6BAAoB,CAACC,MAAM;MAE1CM,2BAAW,EAG2CC,eAAS,wBAF7DC,aAImBC;;IAJDZ,KAAK,EAAC,uDAAuD;IAE5Da,YAAU,EAAEX;qGAI/BH,oBAmBee,6BAnBoBJ,cAAQ,CAACK,MAAM,EAA1BC,OAAO;yBAA/BL,aAmBeM;MAlBGC,EAAE,EAAEF,OAAO,CAACE,EAAE;MACdC,GAAG,EAAEH,OAAO,CAACE,EAAE;MACfE,MAAM,EAAEJ,OAAO,CAACI,MAAM;MACtBC,QAAQ,EAAEL,OAAO,CAACK,QAAQ;MAC1B,kBAAgB,EAAEL,OAAO,CAACM,eAAe;MACzCC,KAAK,EAAEP,OAAO,CAACO,KAAK;MACpBC,KAAK,EAAER,OAAO,CAACS,MAAM;MACrBlB,WAAS,aAAEL,gCAAuB,CAACc,OAAO,EAAEb,MAAM,4CAGnC,QAAmB;MAFlCK,SAAO,aAAEN,8BAAqB,CAACc,OAAO,EAAEb,MAAM,4CAEX,QAAiB;MADpDC,OAAK,aAAEF,4BAAmB,CAACc,OAAO,EAAEb,MAAM,4CAC3C,QAAe;MACduB,QAAQ,EAAEV,OAAO,CAACU,QAAQ;MAC1B,aAAW,EAAEhB,eAAS;MAAG,aAAW,EAAEA,eAAS;MAC/CiB,UAAQ,YAAEzB,eAAM,CAACc,OAAO;MAAI,kBAAgB,EAAEN,cAAQ;MACtDkB,iBAAe,EAAE1B,2BAAkB;MACnC2B,mBAAiB,EAAE3B;;kCAKrC4B,aAK0BC;IALA,aAAW,EAAErB,eAAS;IAAG,aAAW,EAAEA,eAAS;IAC/CsB,SAAS,EAAEtB,oBAAc;IACzBuB,mBAAiB,EAAE/B;+FAM/CO,gFAA8D,EAC9DA,4DAA0C,EAC1CA,6DAA2C,EAC3CA,uEAAqD,EACrDA,uFAAqE,EACrEA,6FAA2E,EAC3EA,6FAA2E,EAC3EA,+FAA2E,EAC3EA,iFAA+D,EAC/DA,0BAAU,EACVA,wCAAwB,EAExBA,qFAAmE,EACnEA,4DAA0C,EAC1CA,6DAA2C,EAC3CA,uEAAqD,EACrDA,uFAAqE,EACrEA,6FAA2E,EAC3EA,6FAA2E,EAC3EA,+FAA2E,EAC3EA,iFAA+D,EAC/DA,0BAAU,EACVA,2CAA2B","names":["_createElementBlock","class","onMousemove","$options","$event","onClick","onKeyup","tabindex","onMousedown","onMouseup","_createCommentVNode","$data","_createBlock","_component_elements_browser","onAddElement","_Fragment","circle","element","_component_circle_element","id","key","moving","resizing","backgroundColor","width","heigh","height","selected","onDblclick","onElementCenterXY","onElementDimensions","_createVNode","_component_lasso_elements_selector","selecting","onLassoSelectorDone"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/git_vuejs_apps/one_app_multiple_components/src/components/movableElements/mainMovableElements.vue"],"sourcesContent":["<template>\n<div class=\"mainContainer\" @mousemove=\"updateMousePos($event)\"\n     @click=\"executeParentClick($event)\"\n     @keyup=\"handleKeyPress($event)\" tabindex=\"0\"\n     @mousedown=\"executeParentMouseDown($event)\"\n     @mouseup=\"executeParentMouseUp($event)\"\n>\n<!--&gt;-->\n  <elements-browser class=\"elementsBrowser animate__animated animate__fadeInLeft\"\n\n                    @addElement=\"addNewElement\" v-if=\"mousePosX<100\">\n\n  </elements-browser>\n\n  <circle-element  v-for=\"element in elements.circle\"\n                   :id=\"element.id\"\n                   :key=\"element.id\"\n                   :moving=\"element.moving\"\n                   :resizing=\"element.resizing\"\n                   :background-color=\"element.backgroundColor\"\n                   :width=\"element.width\"\n                   :heigh=\"element.height\"\n                   @mousedown=\"executeElementMouseDown(element, $event)\"\n                   @mouseup=\"executeElementMouseUp(element, $event)\"\n                   @click=\"executeElementClick(element, $event)\"\n                   v-on:click.stop v-on:mousedown.stop v-on:mouseup.stop\n                   :selected=\"element.selected\"\n                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"\n                   @dblclick=\"resize(element)\" :parent-key-event=\"keyEvent\"\n                   @elementCenterXY=\"setElementCenterXY\"\n                   @elementDimensions=\"setElementDimensions\"\n\n  >\n</circle-element>\n\n  <lasso-elements-selector :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"\n                           :selecting=\"lassoSelecting\"\n                           @lassoSelectorDone=\"lassoSelectElements\"\n  >\n\n  </lasso-elements-selector>\n\n\n<!--    <square-element  v-for=\"element in elements.square\"-->\n<!--                   :id=\"element.id\"-->\n<!--                   :key=\"element.id\"-->\n<!--                   :can-move=\"element.canMove\"-->\n<!--                   :background-color=\"element.backgroundColor\"-->\n<!--                   @click=\"executeElementMouseDown(element, $event)\"-->\n<!--                   v-on:click.stop :selected-flag=\"element.selected\"-->\n<!--                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"-->\n<!--                   :multiple-selected=\"multipleSelected\"-->\n<!--  >-->\n<!--</square-element>-->\n\n<!--   <rectangle-element  v-for=\"element in elements.rectangle\"-->\n<!--                   :id=\"element.id\"-->\n<!--                   :key=\"element.id\"-->\n<!--                   :can-move=\"element.canMove\"-->\n<!--                   :background-color=\"element.backgroundColor\"-->\n<!--                   @click=\"executeElementMouseDown(element, $event)\"-->\n<!--                   v-on:click.stop :selected-flag=\"element.selected\"-->\n<!--                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"-->\n<!--                   :multiple-selected=\"multipleSelected\"-->\n<!--  >-->\n<!--</rectangle-element>-->\n\n  </div>\n</template>\n\n<script>\nimport squareElement from \"@/components/movableElements/squareElement\";\nimport rectangleElement from \"@/components/movableElements/rectangleElement\";\nimport CircleElement from \"@/components/movableElements/circleElement\";\nimport elementsBrowser from \"@/components/movableElements/elementsBrowser\";\nimport lassoElementsSelector from \"@/components/movableElements/lassoElementsSelector\";\n\n\nexport default {\nname: \"mainMovableElements\",\n  components:{CircleElement, squareElement,\n    rectangleElement, elementsBrowser, lassoElementsSelector},\n  data(){\n  return {\n    mousePosX: 0,\n    mousePosY: 0,\n    elements: {\n      circle: {},\n      square: {},\n      rectangle: {},\n    },\n    elementsHighestId: 0,\n    elementsCount: 0,\n    elementsDefaultBackgroundColors: {\n      circle: 'red',\n      square: 'blue',\n      rectangle: 'green'\n    },\n\n    elementsDefaultDimensions: {\n      circle: {\n        width: '100px',\n        height: '100px'\n      },\n      square : {\n        width: '100px',\n        height: '100px'\n      },\n      rectangle: {\n        width: '300px',\n        height: '100px'\n      }\n    },\n    selectedItems: {},\n    multipleSelected: false,\n    lassoSelecting: false,\n    keyEvent: 'none',\n    moving: false,\n    lassoInProgress: false,\n    afterLassoIntervalId: null,\n\n    elementsCopy: [],\n\n  }\n  },\n  mounted() {\n    setInterval(() => {\n              this.updateMultipleSelected();\n            }, 20);\n  },\n  methods:{\n    updateMousePos(event){\n      this.mousePosX = event.clientX;\n      this.mousePosY = event.clientY;\n    },\n    deSelectAllElements(){\n      var keys = Object.keys(this.selectedItems);\n      for (let i=0; i< keys.length; i++){\n        var type = this.selectedItems[keys[i]]['type'];\n        var id = this.selectedItems[keys[i]]['id'];\n        this.elements[type][id].selected = false;\n      }\n      this.selectedItems = {};\n\n    },\n    selectElement(element) {\n      this.elements[element.type][element.id].selected = true;\n      this.selectedItems[element.id] = element;\n    },\n    deSelectElement(element) {\n      this.elements[element.type][element.id].selected = false;\n      if (this.selectedItems.hasOwnProperty(element.id)) {\n            delete this.selectedItems[element.id];\n          }\n    },\n    executeElementMouseDown(element, eventOriginal){\n      console.log('element mouse down');\n      var event = eventOriginal;\n      if (event.shiftKey) {\n        if (element.selected) {\n          this.deSelectElement(element);\n        }\n        else {\n          this.selectElement(element);\n        }\n      }\n      else {\n        this.moveSelectedElements(true)\n      }\n\n\n    },\n    executeElementMouseUp(element, eventOriginal){\n      var event = eventOriginal;\n      if (!event.shiftKey) {\n        this.moveSelectedElements(false);\n      }\n\n    },\n    executeElementClick(element, eventOriginal){\n      console.log('element clicked');\n      var event = eventOriginal;\n      if (!event.shiftKey) {\n        if (!this.moving) {\n          this.deSelectAllElements();\n          this.selectElement(element);\n        } else {\n          this.moveSelectedElements(false)\n        }\n\n      }\n    },\n    handleKeyPress(event) {\n      console.log(event);\n      this.keyEvent = event.key;\n      if (event.key == \"Delete\") {\n        this.deleteSelectedElements();\n      }\n      else if (event.key == \"Enter\" || event.key == \"Escape\") {\n        if (Object.keys(this.selectedItems).length != 0){\n          for (const [id, data] of Object.entries(this.selectedItems) ){\n            this.elements[data.type][id].selected = true;\n            this.elements[data.type][id].resizing = false;\n          }\n        }\n      }\n      else if (event.key == 'A') {\n        this.selectAllElements()\n      }\n      else if (event.key == 'C') {\n        this.copyElements()\n      }\n      else if (event.key == 'V'){\n        this.pasteElements();\n\n      }\n\n    },\n    pasteElements(){\n      for (let i=0; i<this.elementsCopy.length; i++) {\n        var el = this.elementsCopy[i];\n        var elementId = this.elementsHighestId +1;\n        el['id'] = elementId;\n        this.elements[el.type][elementId] = el;\n        this.elementsHighestId += 1;\n        this.elementsCount += 1;\n\n      }\n\n    },\n\n    copyElements(){\n      this.elementsCopy = [];\n      if (Object.keys(this.selectedItems).length != 0) {\n        for (const [id, value] of Object.entries(this.selectedItems)) {\n        this.elementsCopy.push(this.copyElement(value))\n      }\n      }\n\n    },\n    copyElement(element) {\n        var elementData = {\n            type: element.type,\n            id: 0,\n            selected: false,\n            moving: false,\n            resizing: false,\n            backgroundColor: element.backgroundColor,\n            centerXY: {},\n            width: element.width,\n            height: element.height,\n      }\n      return elementData\n\n    },\n    deleteSelectedElements(){\n      for (const [id, value] of Object.entries(this.selectedItems)) {\n          delete this.elements[value.type][id];\n          if (this.selectedItems.hasOwnProperty(id)){\n                    delete this.selectedItems[id]\n                    this.elementsCount -= 1;\n                  }\n\n        }\n    },\n    selectAllElements(){\n      for (const [type, els] of Object.entries(this.elements)){\n        for (const [id, elData] of Object.entries(this.elements[type])){\n          if (!this.elements[type][id]['selected']) {\n            this.elements[type][id]['selected'] = true;\n            this.selectedItems[id] = elData;\n          }\n      }\n      }\n    },\n    addNewElement(type){\n      var elementId = this.elementsHighestId +1;\n      var elementData = {\n            type: type,\n            id: elementId,\n            selected: false,\n            moving: false,\n            resizing: false,\n            backgroundColor: this.elementsDefaultBackgroundColors[type],\n            centerXY: {},\n            width: this.elementsDefaultDimensions[type]['width'],\n            height: this.elementsDefaultDimensions[type]['height'],\n      }\n      this.elements[type][elementId] = elementData\n      this.elementsHighestId += 1\n      this.elementsCount += 1\n    },\n    updateMultipleSelected(){\n      if (Object.keys(this.selectedItems).length > 1){\n        this.multipleSelected = true;\n      } else {\n        this.multipleSelected = false;\n      }\n    },\n    moveSelectedElements(flag) {\n      this.moving = flag;\n      if (Object.keys(this.selectedItems).length != 0) {\n        for (const [id, data] of Object.entries(this.selectedItems)) {\n          this.elements[data.type][id].moving = flag;\n          this.elements[data.type][id].resizing = false;\n        }\n      }\n    },\n    executeParentMouseDown(eventOriginal){\n      var event = eventOriginal;\n      console.log('parent mouse down')\n      this.lassoSelecting = true;\n      // if (event.button == 0 && !event.shiftKey) {\n      //   this.moveSelectedElements(true)\n      // }\n    },\n    executeParentMouseUp(eventOriginal){\n      console.log('parent mouse up')\n      var event = eventOriginal;\n      this.lassoSelecting = false;\n      // if (event.button == 0 && !event.shiftKey) {\n      //   this.moveSelectedElements(false);\n      // }\n\n    },\n    executeParentClick(event) {\n      console.log('parent mouse click')\n      if (!this.lassoInProgress){\n        this.deSelectAllElements();\n      }\n\n    },\n    lassoSelectElements(lassoEdges){\n      console.log(lassoEdges);\n      if (lassoEdges.w >0 && lassoEdges.h >0) {\n        for (const [type, els] of Object.entries(this.elements)) {\n          for (const [id, elData] of Object.entries(this.elements[type])) {\n            var elCenterXY = this.elements[type][id]['centerXY'];\n            if (elCenterXY.x >= lassoEdges.x && elCenterXY.x <= (lassoEdges.x + lassoEdges.w\n            && elCenterXY.y >= lassoEdges.y && elCenterXY.y <= (lassoEdges.y + lassoEdges.h))) {\n                if (!this.elements[type][id]['selected']) {\n                  this.elements[type][id]['selected'] = true;\n                  this.selectedItems[id] = elData;\n                }\n\n\n            } else {\n                  if (this.elements[type][id]['selected']) {\n                  this.elements[type][id]['selected'] = true;\n                  this.selectedItems[id] = elData;\n                }\n            }\n          }\n        }\n\n        this.lassoInProgress = true;\n        this.afterLassoIntervalId = setInterval(() => {\n          this.resetLassoFlag();\n        }, 100);\n      }\n    },\n    resetLassoFlag(){\n      this.lassoInProgress = false;\n      clearInterval(this.afterLassoIntervalId);\n    },\n    setElementCenterXY(elData){\n      this.elements[elData.type][elData.id]['centerXY'] = elData.centerXY;\n    },\n    resize(element){\n      element.selected = false;\n      element.resizing = true;\n    },\n    setElementDimensions(dimensions){\n      this.elements[dimensions.type][dimensions.id]['width'] = dimensions.width;\n      this.elements[dimensions.type][dimensions.id]['height'] = dimensions.height;\n    },\n\n  },\n\n}\n</script>\n\n<style scoped>\n    .mainContainer{\n    position: absolute;\n    width: 100%;\n    height: 100%;\n      background-color: #ffffff;\n  }\n\n    .elementsBrowser{\n      position: absolute;\n      top: 25%;\n      -ms-transform: translateY(-50%);\n      transform: translateY(-50%);\n    }\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}