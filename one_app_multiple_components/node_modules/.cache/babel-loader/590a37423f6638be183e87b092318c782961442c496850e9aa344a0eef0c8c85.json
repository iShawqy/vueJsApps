{"ast":null,"code":"import squareElement from \"@/components/movableElements/squareElement\";\nimport rectangleElement from \"@/components/movableElements/rectangleElement\";\nimport CircleElement from \"@/components/movableElements/circleElement\";\nimport elementsBrowser from \"@/components/movableElements/elementsBrowser\";\nexport default {\n  name: \"mainMovableElements\",\n  components: {\n    CircleElement,\n    squareElement,\n    rectangleElement,\n    elementsBrowser\n  },\n  data() {\n    return {\n      mousePosX: 0,\n      mousePosY: 0,\n      elements: {\n        circle: {},\n        square: {},\n        rectangle: {}\n      },\n      elementsHighestId: 0,\n      elementsCount: 0,\n      elementsDefaultBackgroundColors: {\n        circle: 'red',\n        square: 'blue',\n        rectangle: 'green'\n      },\n      selectedItems: {}\n    };\n  },\n  methods: {\n    updateMousePos(event) {\n      this.mousePosX = event.clientX;\n      this.mousePosY = event.clientY;\n    },\n    handleSelectedElement(element, event) {\n      for (const [type, els] of Object.entries(this.elements)) {\n        for (const [id, elData] of Object.entries(this.elements[type])) {\n          if (element != null) {\n            if (id == element.id) {\n              this.elements[type][id].selected = true;\n              this.selectedItems[id] = elData;\n            } else {\n              if (!event.shiftKey) {\n                this.elements[type][id].selected = false;\n                if (this.selectedItems.hasOwnProperty(id)) {\n                  delete this.selectedItems[id];\n                }\n              }\n            }\n          } else {\n            this.elements[type][id].selected = false;\n            if (this.selectedItems.hasOwnProperty(id)) {\n              delete this.selectedItems[id];\n            }\n          }\n        }\n      }\n    },\n    handleKeyPress(event) {\n      for (const [id, value] of Object.entries(this.selectedItems)) {\n        console.log('hey');\n      }\n    },\n    // handleKeyPress(event){\n    //   if (event.key == \"Delete\"){\n    //     if (this.selectedItems.length != 0){\n    //       for (let item = 0; item < this.selectedItems.length; item++){\n    //         var toDeleteIndicies = [];\n    //         for (let i = 0; i < this.elements[this.selectedItems[item].type].length; i++) {\n    //         if (this.selectedItems[item].id == this.elements[this.selectedItems[item].type][i].id) {\n    //           toDeleteIndicies.push(i);\n    //         }\n    //       }\n    //         for (let e = 0; e < toDeleteIndicies.length; e++) {\n    //           this.elements[this.selectedItems[item].type].splice(toDeleteIndicies[e], 1)\n    //         }\n    //\n    //       }\n    //\n    //     }\n    //   }\n    //\n    // },\n    addNewElement(type) {\n      var elementId = this.elementsHighestId + 1;\n      var elementData = {\n        type: type,\n        id: elementId,\n        canMove: true,\n        backgroundColor: this.elementsDefaultBackgroundColors[type],\n        selected: false\n      };\n      this.elements[type][elementId] = elementData;\n      console.log(this.elements);\n      this.elementsHighestId += 1;\n      this.elementsCount += 1;\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["squareElement","rectangleElement","CircleElement","elementsBrowser","name","components","data","mousePosX","mousePosY","elements","circle","square","rectangle","elementsHighestId","elementsCount","elementsDefaultBackgroundColors","selectedItems","methods","updateMousePos","event","clientX","clientY","handleSelectedElement","element","type","els","Object","entries","id","elData","selected","shiftKey","hasOwnProperty","handleKeyPress","value","console","log","addNewElement","elementId","elementData","canMove","backgroundColor"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/learning_vue/one_app_multiple_components/src/components/movableElements/mainMovableElements.vue"],"sourcesContent":["<template>\n<div class=\"mainContainer\" @mousemove=\"updateMousePos($event)\"\n     @click=\"handleSelectedElement(null)\"\n     @keyup=\"handleKeyPress($event)\" tabindex=\"0\"\n\n>\n  <elements-browser class=\"elementsBrowser animate__animated animate__fadeInLeft\"\n\n                    @addElement=\"addNewElement\" v-if=\"mousePosX<100\">\n\n  </elements-browser>\n<!--<square-element  :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"-->\n<!--                :can-move=\"true\" background-color=\"red\">-->\n<!--</square-element>-->\n  <circle-element  v-for=\"element in elements.circle\"\n                   :id=\"element.id\"\n                   :key=\"element.id\"\n                   :can-move=\"element.canMove\"\n                   :background-color=\"element.backgroundColor\"\n                   @click=\"handleSelectedElement(element, $event)\"\n                   v-on:click.stop :selected-flag=\"element.selected\"\n                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"\n  >\n</circle-element>\n\n\n    <square-element  v-for=\"element in elements.square\"\n                   :id=\"element.id\"\n                   :key=\"element.id\"\n                   :can-move=\"element.canMove\"\n                   :background-color=\"element.backgroundColor\"\n                   @click=\"handleSelectedElement(element, $event)\"\n                   v-on:click.stop :selected-flag=\"element.selected\"\n                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"\n  >\n</square-element>\n\n   <rectangle-element  v-for=\"element in elements.rectangle\"\n                   :id=\"element.id\"\n                   :key=\"element.id\"\n                   :can-move=\"element.canMove\"\n                   :background-color=\"element.backgroundColor\"\n                   @click=\"handleSelectedElement(element, $event)\"\n                   v-on:click.stop :selected-flag=\"element.selected\"\n                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"\n  >\n</rectangle-element>\n<!--  <rectangle-element  :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"-->\n<!--                :can-move=\"true\" background-color=\"blue\">-->\n<!--</rectangle-element>-->\n  </div>\n</template>\n\n<script>\nimport squareElement from \"@/components/movableElements/squareElement\";\nimport rectangleElement from \"@/components/movableElements/rectangleElement\";\nimport CircleElement from \"@/components/movableElements/circleElement\";\nimport elementsBrowser from \"@/components/movableElements/elementsBrowser\";\n\nexport default {\nname: \"mainMovableElements\",\n  components:{CircleElement, squareElement,\n    rectangleElement, elementsBrowser},\n  data(){\n  return {\n    mousePosX: 0,\n    mousePosY: 0,\n    elements: {\n      circle: {},\n      square: {},\n      rectangle: {},\n    },\n    elementsHighestId: 0,\n    elementsCount: 0,\n    elementsDefaultBackgroundColors: {\n      circle: 'red',\n      square: 'blue',\n      rectangle: 'green'\n    },\n\n    selectedItems: {},\n  }\n  },\n  methods:{\n  updateMousePos(event){\n    this.mousePosX = event.clientX;\n    this.mousePosY = event.clientY;\n  },\n  handleSelectedElement(element, event){\n      for (const [type, els] of Object.entries(this.elements)) {\n        for (const [id, elData] of Object.entries(this.elements[type])) {\n          if (element != null) {\n            if (id == element.id) {\n              this.elements[type][id].selected = true;\n              this.selectedItems[id] = elData;\n            } else {\n              if (!event.shiftKey) {\n                this.elements[type][id].selected = false;\n                if (this.selectedItems.hasOwnProperty(id)){\n                  delete this.selectedItems[id]\n                }\n\n              }\n            }\n          }\n          else {\n            this.elements[type][id].selected = false;\n            if (this.selectedItems.hasOwnProperty(id)){\n                  delete this.selectedItems[id]\n                }\n\n          }\n        }\n      }\n\n\n  },\n\n  handleKeyPress(event) {\n    for (const [id, value] of Object.entries(this.selectedItems)) {\n      console.log('hey')\n    }\n  },\n  // handleKeyPress(event){\n  //   if (event.key == \"Delete\"){\n  //     if (this.selectedItems.length != 0){\n  //       for (let item = 0; item < this.selectedItems.length; item++){\n  //         var toDeleteIndicies = [];\n  //         for (let i = 0; i < this.elements[this.selectedItems[item].type].length; i++) {\n  //         if (this.selectedItems[item].id == this.elements[this.selectedItems[item].type][i].id) {\n  //           toDeleteIndicies.push(i);\n  //         }\n  //       }\n  //         for (let e = 0; e < toDeleteIndicies.length; e++) {\n  //           this.elements[this.selectedItems[item].type].splice(toDeleteIndicies[e], 1)\n  //         }\n  //\n  //       }\n  //\n  //     }\n  //   }\n  //\n  // },\n  addNewElement(type){\n    var elementId = this.elementsHighestId +1;\n    var elementData = {\n          type: type,\n          id: elementId,\n          canMove: true,\n          backgroundColor: this.elementsDefaultBackgroundColors[type],\n          selected: false,\n    }\n    this.elements[type][elementId] = elementData\n    console.log(this.elements)\n    this.elementsHighestId += 1\n    this.elementsCount += 1\n  },\n\n\n  }\n}\n</script>\n\n<style scoped>\n    .mainContainer{\n    position: absolute;\n    width: 100%;\n    height: 100%;\n      background-color: #ffffff;\n  }\n\n    .elementsBrowser{\n      position: absolute;\n      top: 25%;\n      -ms-transform: translateY(-50%);\n      transform: translateY(-50%);\n    }\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}