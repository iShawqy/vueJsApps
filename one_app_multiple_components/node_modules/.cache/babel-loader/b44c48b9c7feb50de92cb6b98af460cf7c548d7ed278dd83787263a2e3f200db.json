{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3aefad4b\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"mainContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_question_container = _resolveComponent(\"question-container\");\n  const _component_answers_container = _resolveComponent(\"answers-container\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_question_container, {\n    \"question-text\": $data.questionsAnswers[$data.currentQuestionIndex].question,\n    \"dark-mode-active\": $data.darkModeActive\n  }, null, 8 /* PROPS */, [\"question-text\", \"dark-mode-active\"]), _createVNode(_component_answers_container, {\n    answers: $data.questionsAnswers[$data.currentQuestionIndex].choices,\n    onAnswerClicked: $options.checkAnswer\n  }, null, 8 /* PROPS */, [\"answers\", \"onAnswerClicked\"])]);\n}","map":{"version":3,"mappings":";;;EACKA,KAAK,EAAC;AAAe;;;;uBAA1BC,oBAUM,OAVNC,UAUM,GATJC,aAGqBC;IAHA,eAAa,EAAEC,sBAAgB,CAACA,0BAAoB,EAAEC,QAAQ;IAC9D,kBAAgB,EAAED;kEAIvCF,aAEoBI;IAFAC,OAAO,EAAEH,sBAAgB,CAACA,0BAAoB,EAAEI,OAAO;IAAGC,eAAa,EAAEC","names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_question_container","$data","question","_component_answers_container","answers","choices","onAnswerClicked","$options"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/learning_vue/one_app_multiple_components/src/components/questionaire/questionsAnswersContianer.vue"],"sourcesContent":["<template>\n<div class=\"mainContainer\">\n  <question-container :question-text=\"questionsAnswers[currentQuestionIndex].question\"\n                      :dark-mode-active=\"darkModeActive\">\n\n  </question-container>\n\n  <answers-container :answers=\"questionsAnswers[currentQuestionIndex].choices\" @answerClicked=\"checkAnswer\" >\n\n  </answers-container>\n\n</div>\n</template>\n\n<script>\nimport questionContainer from \"@/components/questionaire/questionContainer\";\nimport answersContainer from \"@/components/questionaire/answersContainer\";\n\nexport default {\nname: \"questionsAnswersContianer\",\n  components: {questionContainer, answersContainer},\n  data(){\n    return {\n      darkModeActive: false,\n      currentQuestionIndex: 0,\n      questionsAnswers: this.createQuestions(),\n      correctAnswer: false,\n    }\n  },\n\n  methods: {\n\n    createQuestions(){\n      let questions = [\n          'What is the capital of France?',\n          'What is the currency of Germany?',\n          'Where is the statue of freedom located?'\n      ];\n      let answers = [\n          ['Berlin', 'Paris', 'Amsterdam'],\n          ['Euro', 'German Mark', 'Pound'],\n          ['Spain', 'Italy', 'USA']\n      ];\n      let correctAnswers = [\n          'Paris',\n          'Euro',\n          'USA'\n      ];\n\n      let QA = []\n      for (let i = 0; i < questions.length; i++) {\n        QA.push(\n            {\n              question: questions[i],\n              choices: answers[i],\n              correctAnswer: correctAnswers[i],\n            }\n        )\n\n      }\n\n      return QA\n\n\n    },\n    nextQuestion(){\n      this.correctAnswer = false;\n      if (this.currentQuestionIndex < this.questionsAnswers.length-1){\n           this.currentQuestionIndex += 1;\n      } else {\n        this.currentQuestionIndex = 0;\n      }\n    },\n    checkAnswer(answer){\n      if (this.questionsAnswers[this.currentQuestionIndex].correctAnswer == answer){\n        this.correctAnswer = true;\n        this.nextQuestion()\n      }\n      console.log(answer)\n    },\n\n    },\n\n\n\n\n\n\n\n}\n</script>\n\n<style scoped>\n.mainContainer{\n  display: flex;\n    flex-direction: column;\n    width: fit-content;\n    height: fit-content;\n  justify-content: flex-start;\n\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}