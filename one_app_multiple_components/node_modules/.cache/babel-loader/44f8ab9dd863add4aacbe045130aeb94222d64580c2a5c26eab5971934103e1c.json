{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, withModifiers as _withModifiers } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_elements_browser = _resolveComponent(\"elements-browser\");\n  const _component_circle_element = _resolveComponent(\"circle-element\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"mainContainer\",\n    onMousemove: _cache[1] || (_cache[1] = $event => $options.updateMousePos($event)),\n    onClick: _cache[2] || (_cache[2] = $event => $options.handleSelectedElement(null)),\n    onKeyup: _cache[3] || (_cache[3] = $event => $options.handleKeyPress($event)),\n    tabindex: \"0\"\n  }, [$data.mousePosX < 100 ? (_openBlock(), _createBlock(_component_elements_browser, {\n    key: 0,\n    class: \"elementsBrowser animate__animated animate__fadeInLeft\",\n    onAddElement: $options.addNewElement\n  }, null, 8 /* PROPS */, [\"onAddElement\"])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\"<square-element  :mouse-pos-x=\\\"mousePosX\\\" :mouse-pos-y=\\\"mousePosY\\\"\"), _createCommentVNode(\"                :can-move=\\\"true\\\" background-color=\\\"red\\\">\"), _createCommentVNode(\"</square-element>\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.elements.circle, element => {\n    return _openBlock(), _createBlock(_component_circle_element, {\n      id: element.id,\n      key: element.id,\n      \"can-move\": element.canMove,\n      \"background-color\": element.backgroundColor,\n      onClick: [$event => $options.handleSelectedElement(element), _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"stop\"]))],\n      \"mouse-pos-x\": $data.mousePosX,\n      \"mouse-pos-y\": $data.mousePosY\n    }, null, 8 /* PROPS */, [\"id\", \"can-move\", \"background-color\", \"onClick\", \"mouse-pos-x\", \"mouse-pos-y\"]);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\"  <rectangle-element  :mouse-pos-x=\\\"mousePosX\\\" :mouse-pos-y=\\\"mousePosY\\\"\"), _createCommentVNode(\"                :can-move=\\\"true\\\" background-color=\\\"blue\\\">\"), _createCommentVNode(\"</rectangle-element>\")], 32 /* HYDRATE_EVENTS */);\n}","map":{"version":3,"mappings":";;;;uBACAA,oBAyBQ;IAzBHC,KAAK,EAAC,eAAe;IAAEC,WAAS,sCAAEC,uBAAc,CAACC,MAAM;IACtDC,OAAK,sCAAEF,8BAAqB;IAC5BG,OAAK,sCAAEH,uBAAc,CAACC,MAAM;IAAGG,QAAQ,EAAC;MAGQC,eAAS,wBAD7DC,aAGmBC;;IAHDT,KAAK,EAAC,uDAAuD;IAC5DU,YAAU,EAAER;kFAGjCS,6FAAyE,EACzEA,mFAA+D,EAC/DA,wCAAwB,qBACtBZ,oBASea,6BAToBL,cAAQ,CAACM,MAAM,EAA1BC,OAAO;yBAA/BN,aASeO;MARGC,EAAE,EAAEF,OAAO,CAACE,EAAE;MACdC,GAAG,EAAEH,OAAO,CAACE,EAAE;MACf,UAAQ,EAAEF,OAAO,CAACI,OAAO;MACzB,kBAAgB,EAAEJ,OAAO,CAACK,eAAe;MACzCf,OAAK,aAAEF,8BAAqB,CAACY,OAAO,4CACrC,QAAe;MACd,aAAW,EAAEP,eAAS;MAAG,aAAW,EAAEA;;kCAI1DI,kGAA8E,EAC9EA,oFAAgE,EAChEA,2CAA2B","names":["_createElementBlock","class","onMousemove","$options","$event","onClick","onKeyup","tabindex","$data","_createBlock","_component_elements_browser","onAddElement","_createCommentVNode","_Fragment","circle","element","_component_circle_element","id","key","canMove","backgroundColor"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/learning_vue/one_app_multiple_components/src/components/movableElements/mainMovableElements.vue"],"sourcesContent":["<template>\n<div class=\"mainContainer\" @mousemove=\"updateMousePos($event)\"\n     @click=\"handleSelectedElement(null)\"\n     @keyup=\"handleKeyPress($event)\" tabindex=\"0\"\n>\n  <elements-browser class=\"elementsBrowser animate__animated animate__fadeInLeft\"\n                    @addElement=\"addNewElement\" v-if=\"mousePosX<100\">\n\n  </elements-browser>\n<!--<square-element  :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"-->\n<!--                :can-move=\"true\" background-color=\"red\">-->\n<!--</square-element>-->\n  <circle-element  v-for=\"element in elements.circle\"\n                   :id=\"element.id\"\n                   :key=\"element.id\"\n                   :can-move=\"element.canMove\"\n                   :background-color=\"element.backgroundColor\"\n                   @click=\"handleSelectedElement(element)\"\n                   v-on:click.stop\n                   :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"\n  >\n</circle-element>\n\n<!--  <rectangle-element  :mouse-pos-x=\"mousePosX\" :mouse-pos-y=\"mousePosY\"-->\n<!--                :can-move=\"true\" background-color=\"blue\">-->\n<!--</rectangle-element>-->\n  </div>\n</template>\n\n<script>\nimport squareElement from \"@/components/movableElements/squareElement\";\nimport rectangleElement from \"@/components/movableElements/rectangleElement\";\nimport CircleElement from \"@/components/movableElements/circleElement\";\nimport elementsBrowser from \"@/components/movableElements/elementsBrowser\";\n\nexport default {\nname: \"mainMovableElements\",\n  components:{CircleElement, squareElement,\n    rectangleElement, elementsBrowser},\n  data(){\n  return {\n    mousePosX: 0,\n    mousePosY: 0,\n    elements: {\n      circle: [],\n      square: [],\n      rectangle:[],\n    },\n\n    selectedItem: null,\n  }\n  },\n  methods:{\n  updateMousePos(event){\n    this.mousePosX = event.clientX;\n    this.mousePosY = event.clientY;\n  },\n  addCircle(){\n    var type = 'circle'\n    this.elements[type].push(\n        {\n          type: type,\n          id: this.elements[type].length +1,\n          canMove: true,\n          backgroundColor: 'blue',\n\n        }\n    )\n    },\n  handleSelectedElement(element){\n\n    if (element != null) {\n      this.selectedItem = element;\n    } else {\n      this.selectedItem = null;\n    }\n\n  },\n  handleKeyPress(event){\n    if (event.key == \"Delete\"){\n      if (this.selectedItem != null){\n        var toDeleteIdx = 0;\n        for (let i = 0; i < this.elements[this.selectedItem.type].length; i++) {\n          if (this.selectedItem.id == this.elements[this.selectedItem.type][i].id) {\n            toDeleteIdx = i;\n            break;\n          }\n        }\n        this.elements[this.selectedItem.type].splice(toDeleteIdx, 1)\n      }\n    }\n\n  },\n  addNewElement(type){\n\n    if (type == 'circle'){\n      this.addCircle()\n    }\n  },\n\n\n  }\n}\n</script>\n\n<style scoped>\n    .mainContainer{\n    position: absolute;\n    width: 100%;\n    height: 100%;\n      background-color: #ffffff;\n  }\n\n    .elementsBrowser{\n      position: absolute;\n      top: 25%;\n      -ms-transform: translateY(-50%);\n      transform: translateY(-50%);\n    }\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}