{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3aefad4b\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"mainContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_question_container = _resolveComponent(\"question-container\");\n  const _component_answers_container = _resolveComponent(\"answers-container\");\n  const _component_score_widget = _resolveComponent(\"score-widget\");\n  const _component_progress_bar = _resolveComponent(\"progress-bar\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_question_container, {\n    \"question-text\": $data.questionsAnswers[$data.currentQuestionIndex].question,\n    \"dark-mode-active\": $data.darkModeActive\n  }, null, 8 /* PROPS */, [\"question-text\", \"dark-mode-active\"]), _createVNode(_component_answers_container, {\n    answers: $data.questionsAnswers[$data.currentQuestionIndex].choices,\n    \"correct-styles\": $data.questionsAnswers[$data.currentQuestionIndex].correctStyles,\n    onAnswerClicked: $options.checkAnswer\n  }, null, 8 /* PROPS */, [\"answers\", \"correct-styles\", \"onAnswerClicked\"]), _createVNode(_component_score_widget, {\n    correct: $data.correctCount,\n    wrong: $data.wrongCount\n  }, null, 8 /* PROPS */, [\"correct\", \"wrong\"]), _createVNode(_component_progress_bar, {\n    \"target-progress\": $data.progress\n  }, null, 8 /* PROPS */, [\"target-progress\"])]);\n}","map":{"version":3,"mappings":";;;EACKA,KAAK,EAAC;AAAe;;;;;;uBAA1BC,oBAeM,OAfNC,UAeM,GAdJC,aAGqBC;IAHA,eAAa,EAAEC,sBAAgB,CAACA,0BAAoB,EAAEC,QAAQ;IAC9D,kBAAgB,EAAED;kEAGvCF,aAIoBI;IAJAC,OAAO,EAAEH,sBAAgB,CAACA,0BAAoB,EAAEI,OAAO;IACvD,gBAAc,EAAEJ,sBAAgB,CAACA,0BAAoB,EAAEK,aAAa;IACpEC,eAAa,EAAEC;6EAGnCT,aACeU;IADAC,OAAO,EAAET,kBAAY;IAAGU,KAAK,EAAEV;iDAE9CF,aACea;IADA,iBAAe,EAAEX;EAAQ","names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_question_container","$data","question","_component_answers_container","answers","choices","correctStyles","onAnswerClicked","$options","_component_score_widget","correct","wrong","_component_progress_bar"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/learning_vue/one_app_multiple_components/src/components/questionaire/questionsAnswersContianer.vue"],"sourcesContent":["<template>\n<div class=\"mainContainer\">\n  <question-container :question-text=\"questionsAnswers[currentQuestionIndex].question\"\n                      :dark-mode-active=\"darkModeActive\">\n\n  </question-container>\n  <answers-container :answers=\"questionsAnswers[currentQuestionIndex].choices\"\n                     :correct-styles=\"questionsAnswers[currentQuestionIndex].correctStyles\"\n                     @answerClicked=\"checkAnswer\" >\n\n  </answers-container>\n  <score-widget :correct=\"correctCount\" :wrong=\"wrongCount\">\n  </score-widget>\n  <progress-bar :target-progress=\"progress\">\n  </progress-bar>\n\n</div>\n</template>\n\n<script>\nimport questionContainer from \"@/components/questionaire/questionContainer\";\nimport answersContainer from \"@/components/questionaire/answersContainer\";\nimport scoreWidget from \"@/components/questionaire/scoreWidget\";\nimport progressBar from \"@/components/questionaire/progressBar\";\nexport default {\nname: \"questionsAnswersContianer\",\n  components: {questionContainer, answersContainer,\n    scoreWidget, progressBar},\n  data(){\n    return {\n      darkModeActive: false,\n      currentQuestionIndex: 0,\n      questionsAnswers: this.createQuestions(),\n      correctCount: 0,\n      wrongCount: 0,\n      progress: 0,\n    }\n  },\n\n  methods: {\n\n\n    createQuestions(){\n      let questions = [\n          'What is the capital of France?',\n          'What is the currency of Germany?',\n          'Where is the statue of freedom located?',\n          'What is the capital of Egypt?',\n          'What is the capital of Austria?',\n          'What is the currency of Switzerland?',\n          'Where is the Alianz Arena football stadium located?',\n          'What is the capital of Italy?',\n      ];\n      let answers = [\n          ['Berlin', 'Paris', 'Amsterdam'],\n          ['Euro', 'German Mark', 'Pound'],\n          ['Spain', 'Italy', 'USA'],\n          ['Alexandria', 'Marakesh', 'Cairo'],\n          ['Berlin', 'Paris', 'Vienna'],\n          ['Euro', 'Swiss Frank', 'Dollars'],\n          ['Berlin', 'Munich', 'Hamburg', 'Barcelona'],\n          ['Vienna', 'Rome', 'Budapest'],\n      ];\n      let correctAnswers = [\n          'Paris',\n          'Euro',\n          'USA',\n          'Cairo',\n          'Vienna',\n          'Swiss Frank',\n          'Munich',\n          'Rome'\n\n      ];\n      let QA = []\n      for (let i = 0; i < questions.length; i++) {\n        var cs = [];\n        for (let s = 0; s < answers[i].length; s++) {\n          cs.push(false)\n        }\n        QA.push(\n            {\n              question: questions[i],\n              choices: answers[i].sort((a, b) => 0.5 - Math.random()),\n              correctAnswer: correctAnswers[i],\n              correctStyles: cs\n\n            }\n        )\n      }\n\n      return QA\n\n\n    },\n    nextQuestion(){\n\n      this.resetCorrectStyles()\n      // this.correctAnswer = false;\n      if (this.currentQuestionIndex < this.questionsAnswers.length-1){\n           this.currentQuestionIndex += 1;\n      } else {\n        this.currentQuestionIndex = 0;\n        this.correctCount = 0;\n        this.wrongCount = 0;\n        this.progress = 0;\n        this.questionsAnswers = this.createQuestions();\n      }\n    },\n    checkAnswer(answer){\n      if (this.questionsAnswers[this.currentQuestionIndex].correctAnswer == answer){\n        this.correctCount += 1;\n        var cs = [];\n        for (let s = 0; s < this.questionsAnswers[this.currentQuestionIndex].correctStyles.length; s++) {\n          if (this.questionsAnswers[this.currentQuestionIndex].choices[s] == answer){\n            cs.push(true)\n          }\n          else{cs.push(false)}\n\n        }\n        this.questionsAnswers[this.currentQuestionIndex].correctStyles = cs;\n        this.progress = ((this.currentQuestionIndex+1)/this.questionsAnswers.length)*100;\n        setTimeout(() => {\n                    this.nextQuestion()\n                }, 400);\n        // this.questionsAnswers[this.currentQuestionIndex].correctStyle = true;\n        // this.correctAnswer = true;\n        // this.nextQuestion()\n      }\n      else {\n        this.wrongCount +=1;\n        var cs = [];\n        for (let s = 0; s < this.questionsAnswers[this.currentQuestionIndex].correctStyles.length; s++) {\n          cs.push(false)\n        }\n        this.questionsAnswers[this.currentQuestionIndex].correctStyles = cs;\n      }\n\n    },\n    resetCorrectStyles(){\n\n      var cs = [];\n        for (let s = 0; s < this.questionsAnswers[this.currentQuestionIndex].correctStyles.length; s++) {\n          cs.push(false)\n        }\n        this.questionsAnswers[this.currentQuestionIndex].correctStyles = cs;\n\n    },\n\n    },\n\n}\n</script>\n\n<style scoped>\n.mainContainer{\n  display: flex;\n    flex-direction: column;\n    width: fit-content;\n    /*height: fit-content;*/\n  justify-content: flex-start;\n\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}