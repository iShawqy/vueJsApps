{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-a801cc94\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"calculatorContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_resultContainer = _resolveComponent(\"resultContainer\");\n  const _component_buttons_container = _resolveComponent(\"buttons-container\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_resultContainer, {\n    result: $data.result,\n    \"onUpdate:result\": _cache[0] || (_cache[0] = $event => $data.result = $event)\n  }, null, 8 /* PROPS */, [\"result\"]), _createVNode(_component_buttons_container, {\n    onBtnClicked: $options.executeClick\n  }, null, 8 /* PROPS */, [\"onBtnClicked\"])]);\n}","map":{"version":3,"mappings":";;;EAEOA,KAAK,EAAC;AAAqB;;;;uBAAhCC,oBAOM,OAPNC,UAOM,GANJC,aAEkBC;IAFOC,MAAM,EAAEC,YAAM;2DAANA,YAAM;uCAGvCH,aAEoBI;IAFAC,YAAU,EAAEC;EAAY","names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_resultContainer","result","$data","_component_buttons_container","onBtnClicked","$options"],"sourceRoot":"","sources":["/Users/ihm/myDrive/private/learning_vue/one_app_multiple_components/src/components/calculatorContainers/calculatorMain.vue"],"sourcesContent":["<template>\n\n  <div class=\"calculatorContainer\">\n    <resultContainer v-model:result=\"result\">\n\n    </resultContainer>\n    <buttons-container @btnClicked=\"executeClick\">\n\n    </buttons-container>\n  </div>\n\n</template>\n\n<script>\nimport ResultContainer from \"@/components/calculatorContainers/resultContainer\";\nimport ButtonsContainer from \"@/components/calculatorContainers/ButtonsContainer\";\n\n\nexport default {\n  name: \"calculatorMain\",\n  components: {ResultContainer, ButtonsContainer},\n\n  data() {\n    return {\n      result: '0',\n      actionBtns: ['C', '+/-', '%', 'รท',\n        'X', '-', '+', '='],\n      currentOperation: null,\n      resultInMemory: null,\n    }\n  },\n  methods: {\n    // checkResultLength() {\n    //   if (this.result.length > 11) {\n    //     this.result = this.result.slice(0, 11);\n    //   }\n    // },\n    executeClick(value) {\n      if (this.actionBtns.includes(value)) {\n        console.log(value);\n        if (value == 'C') {\n          this.result = '0';\n          this.resultInMemory = null;\n          this.currentOperation = null;\n        }\n        else if (value == '+/-') {\n          let oldResult = this.result;\n          if (!oldResult.includes('-')) {\n\n            if (oldResult != '0') {\n              this.result = '-';\n              this.result += oldResult;\n            }\n\n          }\n\n        }\n        else if (value == '%') {\n          let tempResult = parseFloat(this.result);\n          tempResult = tempResult / 100;\n          this.result = tempResult.toString();\n        }\n        else if (value == 'รท' || value == 'X' || value == '-' || value == '+') {\n          if (this.currentOperation != null) {\n            this.flushResult()\n          }\n          this.resultInMemory = parseFloat(this.result);\n          this.currentOperation = value\n\n\n        }\n        else if (value == '=') {\n          this.flushResult()\n\n        }\n      } else {\n\n        if (this.result == '0') {\n          this.result = value;\n        } else if (this.currentOperation == null) {\n          this.result += value;\n        } else {\n          this.result = value;\n        }\n\n      }\n\n    },\n    flushResult() {\n      if (this.currentOperation == 'รท') {\n        this.result = (this.resultInMemory / parseFloat(this.result)).toString()\n      }\n      else if (this.currentOperation == 'X') {\n        this.result = (this.resultInMemory * parseFloat(this.result)).toString()\n      }\n      else if (this.currentOperation == '-') {\n        this.result = (this.resultInMemory - parseFloat(this.result)).toString()\n      }\n      else if (this.currentOperation == '+') {\n        this.result = (this.resultInMemory + parseFloat(this.result)).toString()\n      }\n\n      this.resultInMemory = null;\n      this.currentOperation = null;\n    },\n\n  },\n  watch:{\n    result(newValue, oldValue) {\n      if (newValue.length > 10) {\n        this.result = newValue.slice(0, 10);\n        var temp = parseFloat(this.result)\n        temp =  temp.toExponential(4)\n        this.result = temp.toString()\n      }\n    }\n  },\n\n}\n</script>\n\n<style scoped>\n.calculatorContainer {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: flex-start;\n  border-color: white;\n\n\n      /*border-radius: 20px;*/\n\n  }\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}